import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMinimalTodoTask } from "../../../../structures/IMinimalTodoTask";

/**
 * Create a new task with title and default incomplete status.
 *
 * Create a new task for the authenticated user with a title and initial
 * incomplete status. This operation allows users to capture new work items
 * quickly, supporting the core use case of task creation with minimal friction.
 * The system automatically assigns a unique identifier and creation timestamp,
 * with the task defaulting to incomplete status.
 *
 * The operation validates input against business rules, ensuring task titles
 * are provided and do not exceed 100 characters. Security considerations ensure
 * proper user context and data isolation, with the system automatically
 * associating the new task with the authenticated user.
 *
 * Performance expectations ensure immediate task creation with visual feedback
 * appearing within 200ms of submission, supporting the application's
 * responsiveness requirements. The operation supports the key user scenario of
 * capturing tasks during meetings or other time-sensitive situations where
 * speed is essential.
 *
 * @param props.connection
 * @param props.body Task creation data including title (required) and optional
 *   description
 * @path /minimalTodo/taskUser/tasks
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Task creation data including title (required) and optional
     * description
     */
    body: IMinimalTodoTask.ICreate;
  };
  export type Body = IMinimalTodoTask.ICreate;
  export type Response = IMinimalTodoTask;

  export const METADATA = {
    method: "POST",
    path: "/minimalTodo/taskUser/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/minimalTodo/taskUser/tasks";
  export const random = (): IMinimalTodoTask =>
    typia.random<IMinimalTodoTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific task.
 *
 * Retrieve a single task by its unique identifier with all detailed information
 * including title, status, creation timestamp, and completion timestamp if
 * applicable. This operation provides specific access to individual tasks when
 * users need detailed information beyond what's available in list views.
 *
 * The operation integrates with the minimal_todo_tasks table as defined in the
 * Prisma schema, ensuring consistent access to the complete task data. Security
 * considerations include user data isolation to ensure users can only access
 * their own tasks, with authorization checks performed before returning any
 * task details.
 *
 * Performance considerations ensure rapid retrieval of single tasks, with
 * response times optimized for immediate feedback. The operation supports
 * common user scenarios such as viewing task details before completion or
 * reviewing completed tasks in full detail.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to retrieve
 * @path /minimalTodo/taskUser/tasks/:taskId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function detail(
  connection: IConnection,
  props: detail.Props,
): Promise<detail.Response> {
  return true === connection.simulate
    ? detail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...detail.METADATA,
          path: detail.path(props),
          status: null,
        },
      );
}
export namespace detail {
  export type Props = {
    /** Unique identifier of the task to retrieve */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = IMinimalTodoTask;

  export const METADATA = {
    method: "GET",
    path: "/minimalTodo/taskUser/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/minimalTodo/taskUser/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): IMinimalTodoTask =>
    typia.random<IMinimalTodoTask>();
  export const simulate = (
    connection: IConnection,
    props: detail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: detail.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task's title and status.
 *
 * Update an existing task's details including its title and status. This
 * operation supports the core task management lifecycle, allowing users to
 * modify task information as their work progresses. When updating a task to
 * complete status, the system records the completion timestamp; when updating
 * from complete to incomplete, the system removes the completion timestamp
 * while preserving the creation timestamp.
 *
 * The operation validates input against business rules, ensuring titles do not
 * exceed 100 characters and required fields are properly provided. Security
 * considerations include user data isolation to ensure users can only modify
 * their own tasks, with proper authorization checks performed before any
 * updates.
 *
 * Performance expectations ensure immediate updates with changes reflected
 * instantly in the interface, supporting the application's responsiveness
 * requirements. The operation supports common user scenarios such as updating
 * task titles for clarity or marking tasks as complete once work has been
 * accomplished.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to update
 * @param props.body Task update data including new title, status, and optional
 *   description
 * @path /minimalTodo/taskUser/tasks/:taskId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the task to update */
    taskId: string & tags.Format<"uuid">;

    /**
     * Task update data including new title, status, and optional
     * description
     */
    body: IMinimalTodoTask.IUpdate;
  };
  export type Body = IMinimalTodoTask.IUpdate;
  export type Response = IMinimalTodoTask;

  export const METADATA = {
    method: "PUT",
    path: "/minimalTodo/taskUser/tasks/:taskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/minimalTodo/taskUser/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): IMinimalTodoTask =>
    typia.random<IMinimalTodoTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a task and trigger CASCADE deletion of related records.
 *
 * Remove a task from the user's task list, triggering CASCADE deletion of any
 * related records as defined by the database schema. This operation leverages
 * the database's CASCADE constraint to automatically clean up dependent data
 * and maintain referential integrity. The task and its associated dependent
 * records are completely removed from both user access and system storage.
 *
 * Security considerations include user data isolation to ensure users can only
 * delete their own tasks, with proper authorization checks performed before the
 * deletion operation. The system does not provide recovery for deleted tasks,
 * consistent with the minimal implementation philosophy, so users receive
 * confirmation of permanent removal.
 *
 * The operation takes advantage of the database-level CASCADE deletion defined
 * in the Prisma schema (@relation(onDelete: Cascade)), which automatically
 * handles cleanup of related records to preserve data integrity. While backup
 * systems may retain the data for disaster recovery purposes, the task and its
 * dependent data are immediately and permanently removed from all application
 * views and user-accessible interfaces.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to delete
 * @path /minimalTodo/taskUser/tasks/:taskId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the task to delete */
    taskId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/minimalTodo/taskUser/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/minimalTodo/taskUser/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
