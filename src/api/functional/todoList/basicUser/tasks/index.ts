import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTasks } from "../../../../structures/ITodoListTasks";
import { ITodoListTask } from "../../../../structures/ITodoListTask";

/**
 * Retrieve a specific Todo list task by ID.
 *
 * Retrieve a single Todo list task by its unique identifier. This operation
 * provides access to the complete details of a specific task, including its
 * description, completion status, and associated timestamps.
 *
 * The system verifies that the requested task belongs to the authenticated user
 * before returning the information. This ownership check ensures that users
 * cannot access or view tasks that belong to other users, maintaining data
 * privacy and security.
 *
 * When a task is found and the user is authorized, the system returns the
 * complete task record with all fields. If the task does not exist or the user
 * is not authorized to access it, the system returns an appropriate error
 * response.
 *
 * This operation directly corresponds to the todo_list_tasks table in the
 * Prisma schema, returning a single instance of the task entity. It serves as
 * the primary method for accessing detailed task information after retrieving a
 * list of tasks through search operations.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @path /todoList/basicUser/tasks/:taskId
 * @accessor api.functional.todoList.basicUser.tasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string &
      tags.MinLength<36> &
      tags.MaxLength<36> &
      tags.Pattern<"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"> &
      tags.Format<"uuid"> &
      tags.ContentMediaType<"text/plain">;
  };
  export type Response = ITodoListTasks;

  export const METADATA = {
    method: "GET",
    path: "/todoList/basicUser/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/basicUser/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITodoListTasks => typia.random<ITodoListTasks>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a todo list task description and completion status.
 *
 * Update an existing todoList task with new information. This operation allows
 * authenticated users to modify the description and completion status of their
 * own tasks. The operation performs ownership verification to ensure users can
 * only update tasks they created.
 *
 * The operation updates the task's description if provided in the request body,
 * and can also update the completion status. When a task is marked as
 * completed, the system records the completion timestamp in UTC format. When a
 * previously completed task is marked as incomplete, the system clears the
 * completion timestamp.
 *
 * Security considerations include ownership verification - the system checks
 * that the task belongs to the authenticated user before allowing modification.
 * This prevents unauthorized users from modifying tasks they don't own. The
 * operation returns the updated task object with all current fields.
 *
 * This operation integrates with the todo_list_tasks table as defined in the
 * Prisma schema, updating the relevant fields while preserving the original
 * creation timestamp. The response includes the complete task information with
 * updated values. The operation also updates the updated_at timestamp to
 * reflect the modification time.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to update
 * @param props.body Task update information including description and
 *   completion status
 * @path /todoList/basicUser/tasks/:taskId
 * @accessor api.functional.todoList.basicUser.tasks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the task to update */
    taskId: string &
      tags.MinLength<36> &
      tags.MaxLength<36> &
      tags.Pattern<"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"> &
      tags.Format<"uuid"> &
      tags.ContentMediaType<"text/plain">;

    /** Task update information including description and completion status */
    body: ITodoListTask.IUpdate;
  };
  export type Body = ITodoListTask.IUpdate;
  export type Response = ITodoListTask;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/basicUser/tasks/:taskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/basicUser/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITodoListTask => typia.random<ITodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a todo list task permanently.
 *
 * Permanently remove a todo list task from the system. This operation allows
 * authenticated users to delete tasks they own from their task list. The
 * operation performs ownership verification to ensure users can only delete
 * tasks they created, maintaining data privacy and security.
 *
 * When a user requests to delete a task, the system verifies that the task
 * exists and belongs to the authenticated user. Upon successful verification,
 * the system permanently removes the task record from the database. This is a
 * hard delete operation, meaning the task cannot be recovered after deletion.
 *
 * Security considerations include ownership verification - the system checks
 * that the task belongs to the authenticated user before deletion. This
 * prevents unauthorized users from deleting tasks they don't own. The operation
 * does not return any response body upon successful deletion, only a 204 No
 * Content status.
 *
 * This operation integrates with the todo_list_tasks table as defined in the
 * Prisma schema, permanently removing the specified record. The deletion is
 * immediate and irreversible, aligning with the application's simple task
 * management model that does not include soft delete or trash functionality.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to delete
 * @path /todoList/basicUser/tasks/:taskId
 * @accessor api.functional.todoList.basicUser.tasks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the task to delete */
    taskId: string &
      tags.MinLength<36> &
      tags.MaxLength<36> &
      tags.Pattern<"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"> &
      tags.Format<"uuid"> &
      tags.ContentMediaType<"text/plain">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/basicUser/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/basicUser/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
