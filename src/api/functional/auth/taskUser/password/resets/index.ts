import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMinimalTodoTaskUser } from "../../../../../structures/IMinimalTodoTaskUser";

/**
 * Requests password reset by email for account recovery.
 *
 * This endpoint initiates the password recovery process by creating and
 * delivering a secure reset token to the user's registered email address.
 *
 * The operation processes email submissions by first verifying the email exists
 * in the `minimal_todo_taskusers` table. Upon confirmation, it creates a new
 * record in the `minimal_todo_password_resets` table containing a
 * cryptographically secure token with a 15-minute expiration (recorded in
 * `expires_at`). The token is single-use by design, enforced through the unique
 * constraint on `minimal_todo_taskuser_id` in the password resets table.
 *
 * The system delivers the reset token to the user's verified email address,
 * providing clear instructions with expiration details. The reset process
 * maintains security by not revealing whether an email exists in the system,
 * protecting against user enumeration attacks. All password reset operations
 * occur in Asia/Seoul timezone for consistent time-based validation.
 *
 * Technical implementation follows security best practices including token
 * randomness, short expiration windows, and automatic cleanup of expired
 * tokens. The design intentionally avoids security questions or additional
 * personal information requirements to maintain the minimal feature set while
 * ensuring security.
 *
 * Related operations include the password reset completion flow that validates
 * tokens and updates credentials. This reset request operation fulfills the
 * business requirement for secure account recovery while maintaining the
 * application's minimalist philosophy, providing users a reliable path to
 * regain access without compromising security standards.
 *
 * @param props.connection
 * @param props.body Email address to initiate password recovery process
 * @path /auth/taskUser/password/resets
 * @accessor api.functional.auth.taskUser.password.resets.resetPasswordRequest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPasswordRequest(
  connection: IConnection,
  props: resetPasswordRequest.Props,
): Promise<void> {
  return true === connection.simulate
    ? resetPasswordRequest.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPasswordRequest.METADATA,
          path: resetPasswordRequest.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPasswordRequest {
  export type Props = {
    /** Email address to initiate password recovery process */
    body: IMinimalTodoTaskUser.IPasswordResetRequest;
  };
  export type Body = IMinimalTodoTaskUser.IPasswordResetRequest;

  export const METADATA = {
    method: "POST",
    path: "/auth/taskUser/password/resets",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/taskUser/password/resets";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: resetPasswordRequest.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPasswordRequest.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Completes password reset using validation token.
 *
 * This endpoint completes the password recovery process by validating a reset
 * token and updating the user's password credentials.
 *
 * The operation processes token validation by locating the corresponding record
 * in the `minimal_todo_password_resets` table using the provided token path
 * parameter. It verifies the token hasn't expired by comparing current
 * Asia/Seoul time against the `expires_at` timestamp and ensures the token
 * hasn't been previously used through the unique constraint on
 * `minimal_todo_taskuser_id`.
 *
 * Upon successful token validation, the system updates the associated user's
 * `password_hash` in the `minimal_todo_taskusers` table with the new securely
 * hashed password. The operation immediately invalidates all active sessions
 * for the user by removing related records from the `minimal_todo_sessions`
 * table, ensuring previous access is terminated as a security measure following
 * credential changes.
 *
 * Security considerations include single-use token enforcement, short 15-minute
 * validity window, password complexity validation matching registration
 * requirements, and automatic cleanup of the password reset record after
 * successful completion. The design intentionally avoids revealing specific
 * failure reasons to prevent information leakage.
 *
 * Related operations include the password reset request flow that initiates the
 * recovery process. This completion operation fulfills the business requirement
 * for secure password management while maintaining the minimal feature set
 * philosophy, ensuring users can recover account access without compromising
 * application security standards or introducing unnecessary complexity.
 *
 * @param props.connection
 * @param props.token Validation token for password reset confirmation
 * @param props.body New password credentials for account recovery
 * @path /auth/taskUser/password/resets/:token
 * @accessor api.functional.auth.taskUser.password.resets.resetPasswordComplete
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPasswordComplete(
  connection: IConnection,
  props: resetPasswordComplete.Props,
): Promise<void> {
  return true === connection.simulate
    ? resetPasswordComplete.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPasswordComplete.METADATA,
          path: resetPasswordComplete.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace resetPasswordComplete {
  export type Props = {
    /** Validation token for password reset confirmation */
    token: string & tags.Pattern<"^[a-zA-Z0-9-_=]{22,}$">;

    /** New password credentials for account recovery */
    body: IMinimalTodoTaskUser.IPasswordResetComplete;
  };
  export type Body = IMinimalTodoTaskUser.IPasswordResetComplete;

  export const METADATA = {
    method: "PATCH",
    path: "/auth/taskUser/password/resets/:token",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auth/taskUser/password/resets/${encodeURIComponent(props.token ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: resetPasswordComplete.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPasswordComplete.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("token")(() => typia.assert(props.token));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
