import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * User account information for authentication and identity management.
 *
 * Stores essential details required for secure system access and account
 * recovery. This entity represents the foundation of the application's security
 * model, managing user identities and authentication state throughout the
 * system.
 *
 * Each user account is uniquely identified by a UUID and associated with a
 * verified email address that serves as the primary login credential. The
 * account stores a securely hashed password using industry-standard algorithms
 * (never exposed in responses), ensuring security.
 *
 * The user entity maintains a complete audit trail of account lifecycle through
 * creation, update, and deletion timestamps. The soft delete pattern
 * implemented through the deleted_at field allows for a 7-day grace period
 * before permanent data removal.
 *
 * User data isolation is strictly enforced, ensuring each user can only access
 * their own tasks. All operations on user accounts include appropriate security
 * logging and monitoring.
 *
 * CRITICAL SECURITY NOTE: This response type deliberately excludes
 * password_hash and organizerMemberId fields that appeared in the original
 * schema. These fields were security vulnerabilities as they exposed sensitive
 * data in responses. Password management occurs through secure authentication
 * flows, not direct field access.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IMinimalTodoTaskUser = {
  /**
   * Primary Key.
   *
   * The unique identifier for the user account. This UUID serves as the
   * primary key in the database and is used to reference this user across all
   * system operations.
   *
   * All user operations (tasks, sessions, password resets) are linked to this
   * identifier, ensuring data integrity and proper ownership relationships
   * throughout the system. The UUID format provides global uniqueness and
   * prevents enumeration attacks that could occur with sequential
   * identifiers.
   *
   * During authentication flows, the identifier is verified against session
   * records to ensure the user is properly authenticated before allowing
   * access to protected resources. It is never modified after account
   * creation and serves as a stable reference point for the user's entire
   * lifecycle within the application.
   *
   * The identifier is included in all user responses except during
   * authentication operations where it is embedded within the token payload
   * for security reasons.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Verified email address used for authentication and account recovery. Must
   * be unique across all users.
   *
   * The email serves as the primary authentication identifier for the user
   * account. It is verified during the registration process through a
   * confirmation email containing a time-limited verification code. Once
   * verified, it becomes the immutable identity for the account.
   *
   * Email uniqueness is enforced at the database level with a unique
   * constraint, preventing multiple accounts with the same email address.
   * This ensures each user has a distinct identity within the system and
   * prevents confusion or account conflicts.
   *
   * The email is used for critical account operations including login,
   * password recovery, and security notifications. It is never shared with
   * other users as the system maintains strict data isolation between
   * accounts.
   *
   * During password reset operations, the email is used to send verification
   * codes but generic error messages are returned to prevent user enumeration
   * attacks. The system does not reveal whether an email exists in the
   * database to maintain user privacy and security.
   */
  email: string & tags.Format<"email">;

  /**
   * Timestamp when the user account was created.
   *
   * Records the exact date and time when the user account was initially
   * registered in the system. This timestamp is set once at account creation
   * and never modified, serving as an immutable business record of when the
   * user joined the service.
   *
   * All timestamps in the system use ISO 8601 format with timezone
   * information (UTC+9) corresponding to Asia/Seoul, the core business
   * operating region. This ensures consistency across all temporal operations
   * and displays the correct local time to users in the primary market.
   *
   * The creation timestamp is used for various business purposes including:
   *
   * - Calculating account age
   * - Determining eligibility for time-based promotions
   * - Analytics and reporting on user acquisition
   * - Displaying "Member since" information in the user interface
   *
   * It is included in all user summary and detailed responses but is not
   * modifiable by the user through any API operation, maintaining data
   * integrity and preventing potential security issues.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last account modification.
   *
   * Records the date and time of the most recent update to the user account.
   * This includes operations such as password changes, profile modifications,
   * or any other account updates. The timestamp is automatically updated by
   * the system whenever any field in the user record is modified.
   *
   * Like all timestamps in the system, this uses ISO 8601 format with
   * timezone information (UTC+9) corresponding to Asia/Seoul, ensuring
   * temporal consistency across operations. This timestamp helps users
   * understand when their account information was last changed and provides
   * audit trail information for security purposes.
   *
   * The update timestamp is automatically managed by the system and cannot be
   * manipulated directly by users. It serves as a reliable indicator of
   * account activity and helps detect potential unauthorized access if
   * unexpected changes are observed.
   *
   * This field is included in detailed user responses but may be omitted from
   * summary views to reduce payload size when full account details are not
   * required.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the account was marked for deletion. Null for active
   * accounts.
   *
   * Indicates when a user account was deactivated or scheduled for deletion.
   * When a user requests account deletion, this field is populated with the
   * current timestamp in Asia/Seoul timezone, marking the account as
   * inactive.
   *
   * The presence of a value in this field determines whether the account is
   * considered active. Accounts with a non-null deletedAt timestamp are
   * treated as inactive and cannot be used for authentication. This supports
   * the soft delete pattern, allowing for potential recovery within a limited
   * grace period before permanent removal.
   *
   * During authentication operations, the system checks this field and denies
   * access to accounts that have been marked for deletion. The field enables
   * implementation of a 7-day grace period for account recovery before
   * permanent data removal, satisfying data subject rights under privacy
   * regulations while maintaining system security.
   *
   * After the grace period, accounts with a deletedAt timestamp are
   * permanently removed from the system along with all associated data. Until
   * that time, the account information remains in the database but is
   * inaccessible to the user and hidden from all application views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IMinimalTodoTaskUser {
  /**
   * Request data for creating a new user account in the minimalTodo
   * application.
   *
   * Contains the essential credentials required for user registration: email
   * and password. These represent the minimum information needed to establish
   * a secure user identity.
   *
   * The email serves as the unique identifier for the account. The password
   * is securely hashed before storage, never transmitted or stored in
   * plaintext.
   *
   * Security Note: This request type is ONLY valid for request bodies. It
   * must NEVER appear in response bodies as it contains sensitive
   * authentication credentials.
   */
  export type IJoin = {
    /**
     * Verified email address used for authentication and account recovery.
     * Must be unique across all users.
     *
     * The email serves as the primary identifier for the user account.
     * During registration, the system validates the format and checks for
     * uniqueness against existing accounts.
     *
     * If an email is already registered, the system returns a specific
     * error message without revealing information that could aid in user
     * enumeration attacks. The validation ensures data quality by
     * preventing invalid or malformed email addresses.
     *
     * The email is used for account verification and recovery processes.
     * Users must verify ownership through a confirmation process before the
     * account becomes active.
     *
     * The system implements rate limiting on registration attempts to
     * prevent abuse and automated account creation.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password provided by the user during registration.
     *
     * The password must meet minimum complexity requirements of at least 8
     * characters with a combination of letters and numbers. The system
     * validates this requirement before accepting the registration.
     *
     * During the join operation, the plaintext password is securely hashed
     * using industry-standard algorithms before storage. The original
     * plaintext password is immediately discarded after hashing and never
     * stored, transmitted, or logged.
     *
     * The join operation automatically authenticates the user upon
     * successful registration, eliminating the need for a separate login
     * step and improving user experience.
     */
    password: string;
  };

  /**
   * Authentication response containing user details and access tokens.
   *
   * Returned by authentication operations (join, login, refresh) to provide
   * the client with all necessary information to establish and maintain an
   * authenticated session.
   *
   * The response includes the complete user profile (excluding sensitive
   * information) and a token object containing access and refresh tokens.
   * This allows the client to immediately personalize the user interface
   * while using the tokens to authenticate subsequent requests.
   *
   * The structure supports the application's security model by never exposing
   * passwords or other sensitive authentication material in the response.
   */
  export type IAuthorized = {
    /**
     * The authenticated user account with all available details.
     *
     * Contains the complete user profile information for the authenticated
     * session, excluding sensitive fields like password_hash for security
     * reasons.
     *
     * The user information includes identifying details (id, email),
     * timestamp information (created_at, updated_at), and the deleted_at
     * status. This provides the client application with necessary user
     * context for personalized experiences while maintaining data
     * protection standards.
     *
     * The user object is populated from the authenticated session context
     * and represents the current state of the user's account at the time of
     * token issuance.
     */
    user: IMinimalTodoTaskUser;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Credentials for authenticating a user in the minimalTodo application.
   *
   * Contains the email and password required to verify a user's identity.
   * This request structure is used for the login operation.
   *
   * The email serves as the identifier to locate the user account. The
   * password is used to verify ownership through cryptographic comparison.
   *
   * Security Note: This request type is ONLY valid for request bodies. It
   * must NEVER appear in response bodies as it contains sensitive
   * authentication credentials.
   */
  export type ILogin = {
    /**
     * Verified email address used for authentication. The system locates
     * the user account by this identifier before proceeding with password
     * verification.
     *
     * The email format is validated to ensure it follows standard
     * local@domain pattern. Malformed emails are rejected with specific
     * validation errors.
     *
     * The system implements rate limiting on failed login attempts to
     * prevent brute force attacks. After multiple consecutive failures, the
     * account may be temporarily locked or require additional verification
     * steps.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password provided by the user during authentication.
     *
     * The password is compared against the stored password_hash using
     * secure cryptographic verification. The comparison is performed in
     * constant time to prevent timing attacks.
     *
     * The system never stores or logs the plaintext password. It is only
     * held in memory during the authentication process and immediately
     * discarded.
     */
    password: string;
  };

  /**
   * Request data for refreshing an existing authentication session.
   *
   * Contains the refresh token needed to extend session validity without
   * requiring the user to re-enter their primary credentials.
   *
   * This supports the "remember me" functionality that allows users to
   * maintain access to the application for extended periods while maintaining
   * security through token rotation.
   */
  export type IRefresh = {
    /**
     * Cryptographically secure token used to obtain new access tokens
     * without requiring primary credentials.
     *
     * The refresh token is issued during initial authentication and stored
     * securely with an expiration date. During the refresh operation, the
     * system validates that the token exists, hasn't expired, and is
     * associated with an active user account.
     *
     * Refresh tokens are single-use by design, meaning they are invalidated
     * after being used to obtain new tokens. The token is bound to the
     * user's authentication context and IP address for security.
     */
    refreshToken: string;
  };

  /**
   * Request to initiate the password recovery process for a user account.
   *
   * Contains the email address associated with the account for which password
   * recovery is requested.
   *
   * The operation follows security best practices by not revealing whether
   * the email exists in the system. Upon receiving a valid request, the
   * system creates a time-limited token and sends recovery instructions to
   * the user's email.
   */
  export type IPasswordResetRequest = {
    /**
     * Email address to initiate the password recovery process.
     *
     * The email is used to locate the user account and initiate the
     * password reset workflow. The system verifies that the email exists in
     * the database before proceeding.
     *
     * The system does not reveal whether the email is registered to prevent
     * user enumeration attacks. If valid, the system creates a time-limited
     * reset token valid for 15 minutes.
     *
     * The system implements rate limiting on reset requests to prevent
     * abuse.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * New password credentials for completing the password recovery process.
   *
   * Contains the new password that will be set for the user account after
   * successful token validation.
   *
   * The password must meet minimum complexity requirements. Upon successful
   * processing, the system securely hashes the new password and updates the
   * password_hash field.
   *
   * Critical security measures include validating the reset token,
   * invalidating all active sessions, and protecting against replay attacks
   * through the single-use token mechanism.
   */
  export type IPasswordResetComplete = {
    /**
     * New password to set for the user account during recovery.
     *
     * The password must meet the same complexity requirements as during
     * account registration. The system validates these requirements before
     * accepting the new password.
     *
     * During the reset completion, the plaintext password is securely
     * hashed before storing in the password_hash field. The original
     * plaintext is immediately discarded after hashing.
     *
     * Upon successful password update, the system invalidates all existing
     * sessions for the user to protect against unauthorized access with the
     * old password.
     */
    password: string;
  };
}
