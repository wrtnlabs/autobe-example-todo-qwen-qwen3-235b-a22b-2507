import { tags } from "typia";

/**
 * Represents a todo list task for viewing and detailed operations.
 *
 * This schema defines the structure of a todo list task when retrieved from the
 * system. It includes all essential fields needed to display and interact with
 * a task in the user interface.
 *
 * The schema captures the core task information: its unique identifier,
 * description, and completion status. The completion status is represented by a
 * boolean flag that determines how the task is visually presented in the
 * interface (e.g., strike-through text for completed tasks).
 *
 * Temporal metadata provides important context about the task's lifecycle. The
 * createdAt timestamp shows when the task was originally created, while
 * updatedAt reflects the most recent modification. For completed tasks,
 * completedAt records when the completion occurred, allowing users to track
 * their productivity over time.
 *
 * Security considerations are addressed by excluding the userId field from this
 * response schema. While the backend uses this field for ownership
 * verification, it is not necessary to expose it in the API response,
 * minimizing the data surface area and aligning with the principle of least
 * privilege.
 *
 * All fields in this schema are required as they represent fundamental aspects
 * of task management functionality. The system ensures these fields are always
 * populated, with completedAt being null for incomplete tasks rather than
 * absent.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTask = {
  /**
   * Unique identifier of the task that serves as the primary key and
   * reference for all operations on this task.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The textual description of the task that details what action needs to be
   * taken by the user.
   */
  description: string & tags.MinLength<1> & tags.MaxLength<500>;

  /**
   * Boolean flag indicating whether the task has been completed, used for
   * visual representation and filtering.
   */
  completed: boolean;

  /**
   * Timestamp when the task was marked as completed, null if the task is
   * still active or was unmarked.
   */
  completedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /** Timestamp indicating when the task was originally created in the system. */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when the task was last modified, updated on every
   * change to the task.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace ITodoListTask {
  /**
   * Contains the fields that can be updated for an existing todo list task.
   *
   * This update schema follows the partial update pattern, where all fields
   * are optional to allow flexible modification of task properties. Users can
   * update one or multiple fields in a single request.
   *
   * The description field allows modifying the task's content, supporting
   * scenarios where requirements change or additional details need to be
   * added. The updated text will replace the existing description entirely.
   *
   * The completed field enables changing the task's status, which is the
   * primary way users interact with tasks in a todo list. When setting
   * completed to true, the system will record the current timestamp in the
   * completedAt field. When setting it to false (reopening a task), the
   * system will clear the completedAt timestamp.
   *
   * Notably, this schema does not include the userId field, as task ownership
   * is immutable after creation. Users cannot transfer tasks to other users
   * or modify the ownership, maintaining data integrity and privacy.
   *
   * System-managed fields like createdAt, updatedAt, and id are intentionally
   * excluded from updates. The id cannot be changed as it's the primary key.
   * The createdAt timestamp is immutable as it represents the point of
   * creation. The updatedAt timestamp is automatically updated by the system
   * on every modification, ensuring accurate tracking of when changes occur.
   *
   * The completedAt field is also not directly modifiable through this
   * schema. Its value is automatically managed by the system based on changes
   * to the completed status, preventing clients from manipulating completion
   * timestamps and ensuring data consistency.
   *
   * Since all fields are optional, a valid update request could theoretically
   * be empty, though the system may choose to return an error or ignore such
   * requests based on implementation details.
   */
  export type IUpdate = {
    /**
     * Updated description text for the task, allowing users to modify the
     * details of what needs to be accomplished.
     */
    description?:
      | (string & tags.MinLength<1> & tags.MaxLength<500>)
      | undefined;

    /**
     * New completion status for the task, enabling users to mark tasks as
     * done or reopen completed tasks.
     */
    completed?: boolean | undefined;
  };
}
