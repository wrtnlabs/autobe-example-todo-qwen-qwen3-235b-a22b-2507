import { tags } from "typia";

/**
 * Represents a single task in the todo list application that belongs to a
 * specific user.
 *
 * This schema defines the complete structure of a todo list task, including its
 * content, status, ownership, and temporal metadata. Each task is uniquely
 * identified and associated with a single user who has exclusive control over
 * it.
 *
 * The description field contains the essential information about what needs to
 * be done, supporting the core functionality of task tracking. The completed
 * boolean flag enables the application to visually distinguish between pending
 * and finished tasks, typically displayed with strike-through styling.
 *
 * Temporal fields (createdAt, updatedAt, completedAt) provide important context
 * about the task's lifecycle, enabling chronological sorting, activity
 * tracking, and audit trails. The createdAt and updatedAt fields are
 * system-managed timestamps that reflect when the record was created and last
 * modified.
 *
 * Ownership is established through the userId field, which references the
 * creator and ensures data privacy by restricting access to only the owning
 * user. This ownership model prevents users from viewing or modifying tasks
 * created by others, maintaining the personal nature of the todo list.
 *
 * All fields are required in this schema as they represent essential aspects of
 * task management functionality.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTasks = {
  /**
   * Unique identifier for the task that serves as its primary key in the
   * database and reference point for all operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The task description text that contains the details of what needs to be
   * accomplished by the user.
   */
  description: string & tags.MinLength<1> & tags.MaxLength<500>;

  /**
   * Indicator of whether the task has been completed, used to visually
   * distinguish active from finished tasks.
   */
  completed: boolean;

  /**
   * Timestamp indicating when the task was marked as completed, used for
   * sorting and tracking task completion history.
   */
  completedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp indicating when the task was created, used for sorting tasks
   * chronologically.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when the task was last modified, used for tracking
   * changes and for cache invalidation.
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Identifier of the user who created the task, establishing ownership and
   * access control.
   */
  userId: string & tags.Format<"uuid">;
};
export namespace ITodoListTasks {
  /**
   * Search criteria and pagination parameters for filtering Todo list tasks.
   *
   * This schema defines the parameters available for searching and filtering
   * tasks in the todo list application. It supports advanced query
   * capabilities while maintaining simplicity for basic use cases.
   *
   * Pagination controls (page, limit) allow retrieving specific subsets of
   * tasks, essential for performance when users have many tasks. The limit is
   * capped at 100 items per page to prevent excessively large responses that
   * could impact performance.
   *
   * The search field enables full-text searching across task descriptions,
   * supporting partial matches and case-insensitive queries. This allows
   * users to quickly find specific tasks among many.
   *
   * Filtering by completion status lets users view only active tasks, only
   * completed tasks, or all tasks. This supports common use cases like
   * focusing on pending work or reviewing completed items.
   *
   * Date-based filtering by createdAt enables finding tasks created within
   * specific time ranges, useful for reviewing recent activity or historical
   * data.
   *
   * Sorting options allow organizing results by creation date or description,
   * in ascending or descending order. The default sorting is typically by
   * createdAt in descending order to show the most recent tasks first.
   *
   * A new filter for completedAt allows users to find tasks that were
   * completed within specific time ranges, which is useful for productivity
   * tracking and reporting.
   *
   * All fields are optional, allowing clients to specify only the criteria
   * they need. A request with no parameters would return all tasks sorted by
   * creation date (newest first) with default pagination.
   */
  export type IRequest = {
    /**
     * Filter tasks by completion status (true for completed, false for
     * active).
     */
    completed?: boolean | undefined;

    /** Filter tasks by creation date range. */
    createdAt?:
      | {
          /** Earliest creation date for filtering tasks (inclusive). */
          from: string & tags.Format<"date-time">;

          /** Latest creation date for filtering tasks (inclusive). */
          to: string & tags.Format<"date-time">;
        }
      | undefined;

    /**
     * Maximum number of tasks to include per page, capped at 100 for
     * performance.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort order for results (ascending or descending). */
    order?: "asc" | "desc" | undefined;

    /** Page number to retrieve in paginated results, starting from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Search term to filter tasks by matching against description text. */
    search?: (string & tags.MinLength<1>) | undefined;

    /** Field to sort results by. */
    sortBy?: "createdAt" | "description" | undefined;

    /** Filter tasks by completion date range. */
    completedAt?:
      | {
          /** Earliest completion date for filtering tasks (inclusive). */
          from: string & tags.Format<"date-time">;

          /** Latest completion date for filtering tasks (inclusive). */
          to: string & tags.Format<"date-time">;
        }
      | undefined;
  };

  /**
   * Data for creating a new todo list task.
   *
   * This schema defines the information required to create a new task in the
   * todo list application. It captures only the essential business data
   * needed for task creation, excluding system-managed fields.
   *
   * The description field is required and must contain at least one
   * non-whitespace character, ensuring that tasks have meaningful content. It
   * supports up to 500 characters to allow detailed task descriptions while
   * preventing excessively long entries.
   *
   * The completed field is optional and allows setting the initial state of
   * the task. While most tasks are created as incomplete, this field enables
   * creating tasks that are already marked as completed, which might be
   * useful for backfilling completed work.
   *
   * Notably, this schema does not include the userId field as it is
   * automatically determined from the authenticated user context. The system
   * will associate the new task with the ID of the authenticated user,
   * preventing users from creating tasks for others and maintaining data
   * ownership integrity.
   *
   * System-managed fields like createdAt, updatedAt, and id are intentionally
   * omitted as they are automatically generated by the system upon creation.
   * This follows security best practices by preventing clients from
   * manipulating creation timestamps or assigning IDs.
   *
   * The completedAt field is also excluded from creation as it is only
   * relevant when a task transitions from incomplete to complete status, not
   * at initial creation.
   */
  export type ICreate = {
    /**
     * The text description of the new task to be created, containing the
     * details of what needs to be accomplished.
     */
    description: string & tags.MinLength<1> & tags.MaxLength<500>;

    /**
     * The initial completion status of the task when created. Most tasks
     * start as incomplete (false).
     */
    completed?: boolean | undefined;
  };
}
