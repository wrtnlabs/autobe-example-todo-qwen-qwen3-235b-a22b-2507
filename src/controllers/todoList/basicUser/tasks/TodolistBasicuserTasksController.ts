import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoListBasicUserTasksTaskId } from "../../../../providers/getTodoListBasicUserTasksTaskId";
import { BasicuserAuth } from "../../../../decorators/BasicuserAuth";
import { BasicuserPayload } from "../../../../decorators/payload/BasicuserPayload";
import { putTodoListBasicUserTasksTaskId } from "../../../../providers/putTodoListBasicUserTasksTaskId";
import { deleteTodoListBasicUserTasksTaskId } from "../../../../providers/deleteTodoListBasicUserTasksTaskId";

import { ITodoListTasks } from "../../../../api/structures/ITodoListTasks";
import { ITodoListTask } from "../../../../api/structures/ITodoListTask";

@Controller("/todoList/basicUser/tasks/:taskId")
export class TodolistBasicuserTasksController {
  /**
   * Retrieve a specific Todo list task by ID.
   *
   * Retrieve a single Todo list task by its unique identifier. This operation
   * provides access to the complete details of a specific task, including its
   * description, completion status, and associated timestamps.
   *
   * The system verifies that the requested task belongs to the authenticated
   * user before returning the information. This ownership check ensures that
   * users cannot access or view tasks that belong to other users, maintaining
   * data privacy and security.
   *
   * When a task is found and the user is authorized, the system returns the
   * complete task record with all fields. If the task does not exist or the
   * user is not authorized to access it, the system returns an appropriate
   * error response.
   *
   * This operation directly corresponds to the todo_list_tasks table in the
   * Prisma schema, returning a single instance of the task entity. It serves as
   * the primary method for accessing detailed task information after retrieving
   * a list of tasks through search operations.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @BasicuserAuth()
    basicUser: BasicuserPayload,
    @TypedParam("taskId")
    taskId: string &
      tags.MinLength<36> &
      tags.MaxLength<36> &
      tags.Pattern<"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"> &
      tags.Format<"uuid"> &
      tags.ContentMediaType<"text/plain">,
  ): Promise<ITodoListTasks> {
    try {
      return await getTodoListBasicUserTasksTaskId({
        basicUser,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a todo list task description and completion status.
   *
   * Update an existing todoList task with new information. This operation
   * allows authenticated users to modify the description and completion status
   * of their own tasks. The operation performs ownership verification to ensure
   * users can only update tasks they created.
   *
   * The operation updates the task's description if provided in the request
   * body, and can also update the completion status. When a task is marked as
   * completed, the system records the completion timestamp in UTC format. When
   * a previously completed task is marked as incomplete, the system clears the
   * completion timestamp.
   *
   * Security considerations include ownership verification - the system checks
   * that the task belongs to the authenticated user before allowing
   * modification. This prevents unauthorized users from modifying tasks they
   * don't own. The operation returns the updated task object with all current
   * fields.
   *
   * This operation integrates with the todo_list_tasks table as defined in the
   * Prisma schema, updating the relevant fields while preserving the original
   * creation timestamp. The response includes the complete task information
   * with updated values. The operation also updates the updated_at timestamp to
   * reflect the modification time.
   *
   * @param connection
   * @param taskId Unique identifier of the task to update
   * @param body Task update information including description and completion
   *   status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @BasicuserAuth()
    basicUser: BasicuserPayload,
    @TypedParam("taskId")
    taskId: string &
      tags.MinLength<36> &
      tags.MaxLength<36> &
      tags.Pattern<"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"> &
      tags.Format<"uuid"> &
      tags.ContentMediaType<"text/plain">,
    @TypedBody()
    body: ITodoListTask.IUpdate,
  ): Promise<ITodoListTask> {
    try {
      return await putTodoListBasicUserTasksTaskId({
        basicUser,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a todo list task permanently.
   *
   * Permanently remove a todo list task from the system. This operation allows
   * authenticated users to delete tasks they own from their task list. The
   * operation performs ownership verification to ensure users can only delete
   * tasks they created, maintaining data privacy and security.
   *
   * When a user requests to delete a task, the system verifies that the task
   * exists and belongs to the authenticated user. Upon successful verification,
   * the system permanently removes the task record from the database. This is a
   * hard delete operation, meaning the task cannot be recovered after
   * deletion.
   *
   * Security considerations include ownership verification - the system checks
   * that the task belongs to the authenticated user before deletion. This
   * prevents unauthorized users from deleting tasks they don't own. The
   * operation does not return any response body upon successful deletion, only
   * a 204 No Content status.
   *
   * This operation integrates with the todo_list_tasks table as defined in the
   * Prisma schema, permanently removing the specified record. The deletion is
   * immediate and irreversible, aligning with the application's simple task
   * management model that does not include soft delete or trash functionality.
   *
   * @param connection
   * @param taskId Unique identifier of the task to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @BasicuserAuth()
    basicUser: BasicuserPayload,
    @TypedParam("taskId")
    taskId: string &
      tags.MinLength<36> &
      tags.MaxLength<36> &
      tags.Pattern<"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"> &
      tags.Format<"uuid"> &
      tags.ContentMediaType<"text/plain">,
  ): Promise<void> {
    try {
      return await deleteTodoListBasicUserTasksTaskId({
        basicUser,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
