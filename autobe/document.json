{"operations":[{"specification":"Authentication service for basicUser role in todoList application that handles registration, login, password recovery, and session management.","authorizationType":"join","description":"This operation enables new users to register for a basicUser account in the todoList application by providing their email and password. The operation validates that the email is in proper format and that the password meets minimum security requirements (at least 8 characters) before creating the account. When a user submits valid registration information, the system creates a new user account in the todo_list_basicuser table, storing the email in the email column and the BCrypt hashed password in the password_hash column. The operation prevents duplicate accounts by verifying that the email is not already registered in the system by checking against existing records. The status column is automatically set to 'active' upon successful registration, and the created_at and updated_at timestamps are recorded. This registration process is the first step in establishing a user's identity in the system, enabling them to manage their personal tasks while maintaining data privacy through exclusive ownership of their task list. The operation follows security best practices by hashing passwords before storage and returning appropriate success or error responses to guide the user through the registration process.","summary":"Register a new basicUser account with email and password","parameters":[{"name":"input","description":"The input data required for user registration","schema":{"format":"json","pattern":"","contentMediaType":"","minLength":0,"maxLength":0,"type":"string"}}],"requestBody":{"description":"User registration data containing email and password","typeName":"ITodoListBasicUser.ICreate"},"responseBody":{"description":"Successful user registration response","typeName":"ITodoListBasicUser.IAuthorized"},"authorizationRole":"basicUser","name":"join","prerequisites":[],"path":"/auth/basicUser/join","method":"post"},{"specification":"Authentication service for basicUser role in todoList application that handles registration, login, password recovery, and session management.","authorizationType":"login","description":"This operation authenticates an existing basicUser by validating their email and password credentials. When a user attempts to log in, the system queries the todo_list_basicuser table to find a record with the matching email in the email column and verifies the provided password against the stored password_hash using BCrypt comparison. If the credentials are valid, the system creates a new authentication session by generating a JWT access token with a 15-minute expiration and a refresh token that is stored in the todo_list_basicuser_sessions table. The session record includes the refresh_token, session_id, user_agent, ip_address, and expiration timestamps. The operation enhances security by implementing protection against brute force attacks - after 5 consecutive failed login attempts within 15 minutes, the account is temporarily locked. The system also logs the login attempt in the todo_list_audit_logs table with the action type 'login', user_id, IP address, and user agent for compliance and monitoring purposes. Successful authentication returns the JWT tokens to the client while failed attempts return generic error messages without revealing whether the email or password was incorrect to prevent user enumeration attacks.","summary":"Authenticate a basicUser with email and password","parameters":[{"name":"input","description":"The input data required for user login","schema":{"format":"json","pattern":"","contentMediaType":"","minLength":0,"maxLength":0,"type":"string"}}],"requestBody":{"description":"User login credentials (email and password)","typeName":"ITodoListBasicUser.ILogin"},"responseBody":{"description":"Authentication tokens for successful login","typeName":"ITodoListBasicUser.IAuthorized"},"authorizationRole":"basicUser","name":"login","prerequisites":[],"path":"/auth/basicUser/login","method":"post"},{"specification":"Authentication service for basicUser role in todoList application that handles registration, login, password recovery, and session management.","authorizationType":"refresh","description":"This operation allows an authenticated basicUser to obtain a new access token by presenting a valid refresh token. When a user's access token expires after its 15-minute lifespan, they can use this refresh mechanism to maintain their session without requiring re-entry of credentials. The system validates the provided refresh token by looking it up in the todo_list_basicuser_sessions table to ensure it matches an existing session record associated with the user. If the refresh token is valid and not expired (checked against the expires_at timestamp), the system implements token rotation by issuing a new access token and a new refresh token, storing the new refresh token in the sessions table while invalidating the previous one. This rotation enhances security by ensuring that each refresh token is used only once. The operation updates the session's refresh_token, session_id, expires_at, and updated_at fields to reflect the new session state. The system also logs this token refresh activity in the todo_list_audit_logs table for audit trail purposes, recording the action, user information, and timestamps. This refresh capability supports the user experience by minimizing authentication interruptions while maintaining security through short-lived access tokens and rotating refresh tokens.","summary":"Refresh authentication tokens using a valid refresh token","parameters":[{"name":"input","description":"The input data required for token refresh","schema":{"format":"json","pattern":"","contentMediaType":"","minLength":0,"maxLength":0,"type":"string"}}],"requestBody":{"description":"Refresh token for obtaining new authentication tokens","typeName":"ITodoListBasicUser.IRefresh"},"responseBody":{"description":"New authentication tokens after successful refresh","typeName":"ITodoListBasicUser.IAuthorized"},"authorizationRole":"basicUser","name":"refresh","prerequisites":[],"path":"/auth/basicUser/refresh","method":"post"},{"specification":"Authentication service for basicUser role in todoList application that handles registration, login, password recovery, and session management.","authorizationType":null,"description":"This operation initiates a secure password recovery process for a basicUser who has forgotten their password. When a user requests password recovery, the system first verifies that the provided email address exists in the todo_list_basicuser table by checking the email column. If the email is found, the system generates a cryptographically secure reset token and stores it in the todo_list_password_reset_tokens table along with the todo_list_basicuser_id, token expiration time (24 hours from creation), and timestamps. The operation then triggers a secure email containing a reset link with the token parameter to be sent to the user's registered email address. This initiates a time-limited and single-use recovery flow that ensures only the legitimate account owner can reset their password. The system does not confirm whether an email exists in the system to prevent user enumeration attacks, instead returning a generic message that a reset link will be sent if the account exists. This operation is essential for account recovery while maintaining security through token expiration and single-use constraints, allowing users to regain access to their todo list without compromising the security of other accounts.","summary":"Initiate password recovery process by email","parameters":[{"name":"input","description":"The input data required for password recovery initiation","schema":{"format":"json","pattern":"","contentMediaType":"","minLength":0,"maxLength":0,"type":"string"}}],"requestBody":{"description":"Email address for password recovery","typeName":"ITodoListBasicUser.IRequestPasswordReset"},"responseBody":{"description":"Confirmation of password reset request initiation","typeName":"ITodoListBasicUser.IRequestPasswordResetResponse"},"authorizationRole":"basicUser","name":"requestPasswordReset","prerequisites":[{"endpoint":{"path":"/todoList/basicUser/tasks","method":"post"},"description":"User must have a valid active task in the system before initiating password recovery process, establishing account existence through task creation"}],"path":"/auth/basicUser/password/reset","method":"post"},{"specification":"Authentication service for basicUser role in todoList application that handles registration, login, password recovery, and session management.","authorizationType":null,"description":"This operation validates whether a password reset token is still active and available for use. The system checks the provided token against records in the todo_list_password_reset_tokens table, verifying that the token matches an existing record associated with a user. The operation evaluates multiple criteria to determine token validity: the token must not have expired (current time must be before expires_at), must not have been previously used (used_at is null), and must not have been revoked (deleted_at is null). This validation ensures that users cannot reuse tokens after they have been used or expired, maintaining the security of the password recovery process. The operation returns a simple boolean response indicating whether the token is valid, without revealing additional information about the user account. This endpoint is typically called by the frontend application before displaying the password reset form to ensure the recovery process can proceed. By validating the token before allowing password changes, the system prevents unauthorized access attempts and ensures that only legitimate recovery requests can proceed to the next step.","summary":"Validate if a password reset token is still active","parameters":[{"name":"input","description":"The input data required for token validation","schema":{"format":"json","pattern":"","contentMediaType":"","minLength":0,"maxLength":0,"type":"string"}}],"requestBody":{"description":"Password reset token to validate","typeName":"ITodoListBasicUser.IValidatePasswordResetToken"},"responseBody":{"description":"Result of token validation check","typeName":"ITodoListBasicUser.IValidatePasswordResetTokenResponse"},"authorizationRole":"basicUser","name":"validatePasswordResetToken","prerequisites":[{"endpoint":{"path":"/auth/basicUser/password/reset","method":"post"},"description":"Password reset process must be initiated first to generate a valid token for validation"}],"path":"/auth/basicUser/password/reset/validate","method":"post"},{"specification":"Authentication service for basicUser role in todoList application that handles registration, login, password recovery, and session management.","authorizationType":null,"description":"This operation allows a basicUser to complete the password reset process by submitting a new password along with a valid reset token. The system first validates the token by querying the todo_list_password_reset_tokens table to ensure it matches an unexpired, unused token linked to a user account. After successful token validation, the system checks that the new password meets the minimum security requirements (at least 8 characters) before proceeding. Upon successful validation, the system updates the user's password_hash in the todo_list_basicuser table with the BCrypt hash of the new password, effectively changing their credentials. The system then marks the reset token as used by setting the used_at timestamp in the todo_list_password_reset_tokens table and logs this security-critical action in the todo_list_audit_logs table with action type 'password_reset'. This operation enhances security by invalidating the reset token after use, preventing replay attacks, and ensuring that only one password change can occur per recovery request. The operation also triggers the invalidation of all existing sessions for the user's account as a security measure, requiring them to log in again with their new credentials on all devices.","summary":"Change password using a valid reset token","parameters":[{"name":"input","description":"The input data required for completing password reset","schema":{"format":"json","pattern":"","contentMediaType":"","minLength":0,"maxLength":0,"type":"string"}}],"requestBody":{"description":"New password and reset token for password change","typeName":"ITodoListBasicUser.ICompletePasswordReset"},"responseBody":{"description":"Confirmation of successful password reset","typeName":"ITodoListBasicUser.ICompletePasswordResetResponse"},"authorizationRole":"basicUser","name":"completePasswordReset","prerequisites":[{"endpoint":{"path":"/auth/basicUser/password/reset/validate","method":"post"},"description":"Password reset token must be validated as active before completing the password reset process"}],"path":"/auth/basicUser/password/reset/complete","method":"post"},{"specification":"This operation retrieves a paginated list of Todo list tasks with advanced filtering, searching, and sorting capabilities. It operates on the todo_list_tasks table from the Prisma schema and supports complex queries to find tasks based on various criteria including completion status, description text, creation date, and user association.","authorizationType":null,"description":"Retrieve a filtered and paginated list of Todo list tasks from the system. This operation provides advanced search capabilities for finding tasks based on multiple criteria including completion status, partial description matching, and creation date ranges.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Users can sort by creation date in ascending or descending order, allowing them to view their most recent or oldest tasks first.\n\nSecurity considerations require authentication to access this endpoint, as users can only retrieve their own tasks. The system verifies the user's identity through JWT authentication and filters results to include only tasks associated with the authenticated user's ID.\n\nThis operation integrates with the todo_list_tasks table as defined in the Prisma schema, incorporating all available task fields and relationships. The response includes full task information including description, completion status, and timestamps, supporting the core functionality of the Todo list application.","summary":"Search and retrieve a filtered, paginated list of your Todo list tasks","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"format":"uuid","pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$","contentMediaType":"text/plain","minLength":36,"maxLength":36,"type":"string"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering Todo tasks","typeName":"ITodoListTasks.IRequest"},"responseBody":{"description":"Paginated list of Todo tasks matching search criteria","typeName":"IPageITodoListTasks"},"authorizationRole":"basicUser","name":"index","prerequisites":[{"endpoint":{"path":"/todoList/basicUser/tasks","method":"post"},"description":"Task must be created through POST operation before it can be updated via PATCH operation"}],"path":"/todoList/basicUser/tasks","method":"patch"},{"specification":"This operation retrieves a specific Todo list task by its unique identifier. It serves as the detailed view endpoint for individual tasks, providing complete information about a single task record.","authorizationType":null,"description":"Retrieve a single Todo list task by its unique identifier. This operation provides access to the complete details of a specific task, including its description, completion status, and associated timestamps.\n\nThe system verifies that the requested task belongs to the authenticated user before returning the information. This ownership check ensures that users cannot access or view tasks that belong to other users, maintaining data privacy and security.\n\nWhen a task is found and the user is authorized, the system returns the complete task record with all fields. If the task does not exist or the user is not authorized to access it, the system returns an appropriate error response.\n\nThis operation directly corresponds to the todo_list_tasks table in the Prisma schema, returning a single instance of the task entity. It serves as the primary method for accessing detailed task information after retrieving a list of tasks through search operations.","summary":"Retrieve a specific Todo list task by ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"format":"uuid","pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$","contentMediaType":"text/plain","minLength":36,"maxLength":36,"type":"string"}}],"requestBody":null,"responseBody":{"description":"The requested Todo list task","typeName":"ITodoListTasks"},"authorizationRole":"basicUser","name":"at","prerequisites":[{"endpoint":{"path":"/todoList/basicUser/tasks","method":"post"},"description":"Task must be created before it can be retrieved"}],"path":"/todoList/basicUser/tasks/{taskId}","method":"get"},{"specification":"This operation creates a new Todo list task for the authenticated user. It handles the creation of task records in the todo_list_tasks table with proper validation and association to the user.","authorizationType":null,"description":"Create a new Todo list task for the authenticated user. This operation adds a new record to the todo_list_tasks table with the provided description and initializes default values for other fields.\n\nThe system validates that the task description is not empty and contains at least one non-whitespace character before creation. The description field has a maximum length of 500 characters, and any input exceeding this limit will be truncated.\n\nUpon successful validation, the system creates a new task record with the following default values: completion status set to false (active task), and creation timestamp set to the current time in UTC. The task is automatically associated with the authenticated user's ID through the user authentication system.\n\nThe response returns the complete task record including the generated unique identifier and timestamps. This allows the client to immediately display the new task with all its information without requiring a separate retrieval operation.\n\nThis operation implements the core task creation functionality of the Todo list application, enabling users to add new items to their personal task list.","summary":"Create a new Todo list task","parameters":[{"name":"todoListTaskId","description":"Unique identifier of the target task","schema":{"format":"uuid","pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$","contentMediaType":"text/plain","minLength":36,"maxLength":36,"type":"string"}}],"requestBody":{"description":"Data for creating a new todo list task","typeName":"ITodoListTasks.ICreate"},"responseBody":{"description":"The created todo list task","typeName":"ITodoListTasks"},"authorizationRole":"basicUser","name":"create","prerequisites":[{"endpoint":{"path":"/auth/basicUser/password/reset","method":"post"},"description":"User must be registered before creating tasks"}],"path":"/todoList/basicUser/tasks","method":"post"},{"specification":"This operation updates an existing todoList task with new information. It operates on the todo_list_tasks table from the Prisma schema, allowing authenticated users to modify task descriptions and completion status. The operation verifies that the user attempting to update the task is the owner of that task, ensuring data privacy and security.","authorizationType":null,"description":"Update an existing todoList task with new information. This operation allows authenticated users to modify the description and completion status of their own tasks. The operation performs ownership verification to ensure users can only update tasks they created.\n\nThe operation updates the task's description if provided in the request body, and can also update the completion status. When a task is marked as completed, the system records the completion timestamp in UTC format. When a previously completed task is marked as incomplete, the system clears the completion timestamp.\n\nSecurity considerations include ownership verification - the system checks that the task belongs to the authenticated user before allowing modification. This prevents unauthorized users from modifying tasks they don't own. The operation returns the updated task object with all current fields.\n\nThis operation integrates with the todo_list_tasks table as defined in the Prisma schema, updating the relevant fields while preserving the original creation timestamp. The response includes the complete task information with updated values. The operation also updates the updated_at timestamp to reflect the modification time.","summary":"Update a todo list task description and completion status","parameters":[{"name":"taskId","description":"Unique identifier of the task to update","schema":{"format":"uuid","pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$","contentMediaType":"text/plain","minLength":36,"maxLength":36,"type":"string"}}],"requestBody":{"description":"Task update information including description and completion status","typeName":"ITodoListTask.IUpdate"},"responseBody":{"description":"Updated task information","typeName":"ITodoListTask"},"authorizationRole":"basicUser","name":"update","prerequisites":[{"endpoint":{"path":"/todoList/basicUser/tasks","method":"post"},"description":"Task must be created before it can be updated"}],"path":"/todoList/basicUser/tasks/{taskId}","method":"put"},{"specification":"This operation permanently deletes a todo list task from the system. It operates on the todo_list_tasks table from the Prisma schema, removing the specified task record when the authenticated user has ownership of that task.","authorizationType":null,"description":"Permanently remove a todo list task from the system. This operation allows authenticated users to delete tasks they own from their task list. The operation performs ownership verification to ensure users can only delete tasks they created, maintaining data privacy and security.\n\nWhen a user requests to delete a task, the system verifies that the task exists and belongs to the authenticated user. Upon successful verification, the system permanently removes the task record from the database. This is a hard delete operation, meaning the task cannot be recovered after deletion.\n\nSecurity considerations include ownership verification - the system checks that the task belongs to the authenticated user before deletion. This prevents unauthorized users from deleting tasks they don't own. The operation does not return any response body upon successful deletion, only a 204 No Content status.\n\nThis operation integrates with the todo_list_tasks table as defined in the Prisma schema, permanently removing the specified record. The deletion is immediate and irreversible, aligning with the application's simple task management model that does not include soft delete or trash functionality.","summary":"Delete a todo list task permanently","parameters":[{"name":"taskId","description":"Unique identifier of the task to delete","schema":{"format":"uuid","pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$","contentMediaType":"text/plain","minLength":36,"maxLength":36,"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationRole":"basicUser","name":"erase","prerequisites":[{"endpoint":{"path":"/todoList/basicUser/tasks","method":"post"},"description":"Task must be created before it can be deleted"}],"path":"/todoList/basicUser/tasks/{taskId}","method":"delete"}],"components":{"authorization":[{"name":"basicUser","description":"A user who can create, view, update, and delete their own tasks in the Todo list application","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTasks":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTasks"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListBasicUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address used for registration and authentication to establish the user's identity in the system."},"password":{"type":"string","minLength":8,"description":"Plain text password that will be securely hashed using BCrypt before storage in the system for authentication purposes."}},"required":["email","password"],"description":"User registration data containing email and password.\n\nThis schema represents the data required to register a new basicUser account in the todoList application. It captures the essential information needed to create a user profile with secure authentication.\n\nThe email serves as the unique identifier for the user and is used for login, account recovery, and system communications. It must be in valid email format to ensure deliverability and uniqueness within the system.\n\nThe password is collected in plain text through secure HTTPS connections and is never stored as-is. The backend system will apply BCrypt hashing with appropriate salt before persisting it in the todo_list_basicuser.password_hash field, ensuring password security even in the event of database compromise.\n\nThis registration process is the first step in establishing a user's identity, enabling them to manage their personal tasks while the system maintains data privacy through exclusive ownership of their task list. The minimal information requirement aligns with the application's focus on simplicity and ease of use. ","x-autobe-prisma-schema":"todo_list_basicuser"},"ITodoListBasicUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user that establishes their identity across the system."},"email":{"type":"string","format":"email","description":"Email address associated with the authenticated user account for identification and communication purposes."},"status":{"type":"string","description":"Current status of the user account that indicates whether they can actively use the system (active, suspended, etc)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nThe `created_at` means the date and time when the user account was\ninitially created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated.\n\nThe `updated_at` means the date and time when the user account was last\nupdated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","status","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as login, registration, or token refresh. It contains the essential information needed for the client to establish and maintain an authenticated session.\n\nThe ID provides a unique reference to the authenticated user within the system, allowing for personalization and ownership of resources like tasks. The JWT token contains encoded authentication data with a defined expiration, enabling stateless authentication for subsequent API requests.\n\nThe inclusion of user details like email and status in the response allows the client application to immediately personalize the user interface without requiring an additional profile fetch operation, improving the user experience and reducing round trips to the server.\n\nThis structure enables complete JWT token lifecycle management while providing immediate access to basic user information necessary for frontend rendering and authorization decisions."},"ITodoListBasicUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address used as the username for authentication to identify the user in the system."},"password":{"type":"string","description":"User's password in plain text that will be verified against the stored hash for authentication purposes."}},"required":["email","password"],"description":"User login credentials (email and password).\n\nThis schema defines the data structure for user authentication in the todoList application. It captures the essential credentials needed to verify a user's identity and establish a session.\n\nThe email field serves as the username identifier, uniquely identifying the user account in the system. It must match the email used during registration exactly, including case sensitivity depending on system configuration.\n\nThe password is provided in plain text by the client through secure HTTPS connections. The backend system will retrieve the corresponding password_hash from the todo_list_basicuser table and use BCrypt comparison to verify the credentials without ever handling the plain text password directly.\n\nThis login mechanism follows standard security practices by using industry-standard password hashing (BCrypt) and secure transmission (HTTPS). The system implements protection against brute force attacks by temporarily locking accounts after multiple failed attempts.\n\nThe minimal credential requirement aligns with the application's focus on simplicity, avoiding complex multi-factor authentication for this basic user role while still providing adequate security for personal task management. ","x-autobe-prisma-schema":"todo_list_basicuser"},"ITodoListBasicUser.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Valid refresh token that allows obtaining new access tokens without re-entering credentials."}},"required":["refreshToken"],"description":"Refresh token for obtaining new authentication tokens.\n\nThis schema represents the data needed to refresh an expired access token and maintain an authenticated session. It enables users to continue using the application without repeatedly logging in.\n\nThe refresh token is a long-lived credential (typically 7 days) that is securely stored on the server in the todo_list_basicuser_sessions table. When a user's short-lived access token expires (typically 15 minutes), they can use this refresh token to obtain a new access token.\n\nThe refresh mechanism implements security best practices through token rotation - each refresh generates a new refresh token and invalidates the previous one. This limits the lifespan of any compromised token and provides a defense against replay attacks.\n\nBy separating short-lived access tokens from long-lived refresh tokens, the system reduces the attack surface while maintaining a good user experience. The refresh token itself is never used to access protected resources directly, only to obtain new access tokens.\n\nThis approach balances security and usability, preventing constant re-authentication while minimizing the risk associated with long-lived authentication credentials."},"ITodoListBasicUser.IRequestPasswordReset":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address for which password recovery should be initiated."}},"required":["email"],"description":"Email address for initiating password recovery.\n\nThis schema represents the data needed to start the password reset process for a user account. It contains only the essential information required to verify account existence and initiate recovery.\n\nThe email field identifies the account for which password recovery is requested. The system will check if a user with this email exists in the database before proceeding with the recovery process.\n\nSecurity considerations include not revealing whether an email is registered in the system. The response will be identical regardless of whether the email exists, preventing user enumeration attacks. This protects user privacy by not disclosing account information to potential attackers.\n\nWhen a valid email is provided, the system generates a cryptographically secure token and sends a password reset link to the associated email address. This link includes the token as a parameter and is valid for a limited time (typically 24 hours).\n\nThe process follows security best practices by using time-limited, single-use tokens and sending recovery instructions to the verified email address, ensuring that only the legitimate account owner can reset their password.\n\nThis simple schema aligns with the application's focus on usability while maintaining strong security controls for account recovery. ","x-autobe-prisma-schema":"todo_list_basicuser"},"ITodoListBasicUser.IRequestPasswordResetResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset request was accepted, regardless of whether the email exists."}},"required":["success"],"description":"Confirmation of password reset request initiation.\n\nThis response schema provides feedback after a password reset request is submitted. It indicates whether the request was processed successfully, without disclosing information about the existence of the email account.\n\nThe success field will always be true when the request is properly formatted and processed, even if the email does not correspond to a registered account. This deliberate design prevents user enumeration attacks where attackers could determine which email addresses are registered in the system.\n\nBy returning the same response for both existing and non-existing accounts, the system protects user privacy and security. Users who have accounts will receive a reset email if they entered their correct email address, while those who don't have accounts will simply not receive anything.\n\nThis approach follows security best practices for password recovery flows, balancing usability with protection against automated attacks. Legitimate users can safely request password resets without worrying about exposing their account status, while the system remains resilient against reconnaissance attempts by malicious actors.\n\nThe simplicity of this response aligns with the application's minimalist design philosophy, providing necessary feedback without unnecessary complexity or information disclosure."},"ITodoListBasicUser.IValidatePasswordResetToken":{"type":"object","properties":{"token":{"type":"string","description":"Password reset token to validate for active status and usability."}},"required":["token"],"description":"Password reset token to validate.\n\nThis schema contains the token that needs to be verified for the password reset process. It represents the identifier extracted from the password reset link that was emailed to the user.\n\nThe token field holds the cryptographically secure string that was generated when the user requested password recovery. This token is stored in the todo_list_password_reset_tokens table along with expiration and usage information.\n\nValidation checks several criteria to ensure the token can be used safely:\n- The token matches an existing record in the database\n- The current time is before the token's expiration time (typically 24 hours from creation)\n- The token has not been previously used (used_at is null)\n- The token has not been revoked (deleted_at is null)\n\nThis validation step is crucial for security, ensuring that users cannot reuse tokens after they have been used or expired. It prevents replay attacks and ensures that each recovery request can only be completed once.\n\nThe frontend typically calls this endpoint before displaying the password reset form to provide immediate feedback on whether the recovery process can proceed, improving the user experience by catching expired or invalid tokens early."},"ITodoListBasicUser.IValidatePasswordResetTokenResponse":{"type":"object","properties":{"valid":{"type":"boolean","description":"Indicates whether the provided reset token is currently valid and can be used for password reset."}},"required":["valid"],"description":"Result of password reset token validation check.\n\nThis response schema provides the outcome of validating a password reset token. It indicates whether the token is currently active and available for use in the password recovery process.\n\nThe valid field will be true only if the token exists in the system, has not expired, has not been used previously, and has not been revoked. If any of these conditions are not met, the field will be false.\n\nThis simple boolean response prevents information leakage about why a token might be invalid. Whether a token is expired, already used, revoked, or simply does not exist, the response remains the same. This protects against enumeration attacks and timing attacks that could be used to gather information about the system.\n\nThe response enables the client application to determine whether to proceed with the password reset flow. If valid is true, the application can display the password change form. If valid is false, it can show an appropriate error message guiding the user to request a new reset link.\n\nThis validation step enhances security by ensuring that only legitimate, time-limited recovery requests can proceed to the actual password change stage, while maintaining a simple interface that doesn't expose internal system details."},"ITodoListBasicUser.ICompletePasswordReset":{"type":"object","properties":{"token":{"type":"string","description":"Valid reset token that was emailed to the user for authentication in the password recovery process."},"password":{"type":"string","minLength":8,"description":"New password for the account that will replace the current one after validation."}},"required":["token","password"],"description":"New password and reset token for completing password reset.\n\nThis schema contains the information needed to finalize the password recovery process. It combines authentication (via the reset token) with the new credential (the password).\n\nThe token field provides the authentication factor that verifies the user's identity through possession of the reset link sent to their email. This ensures that only someone with access to the registered email can change the password.\n\nThe password field contains the new credential that will replace the current one. It must meet the system's minimum security requirements (at least 8 characters) to ensure account security is maintained.\n\nSecurity measures include:\n- Server-side validation that the token is valid and unused\n- BCrypt hashing of the new password before storage\n- Invalidating the reset token after use to prevent reuse\n- Invalidating all existing sessions for the user as a security measure\n\nThis two-step process (request token via email, then use token to set new password) follows industry best practices for secure password recovery, balancing security with usability for legitimate users. ","x-autobe-prisma-schema":"todo_list_basicuser"},"ITodoListBasicUser.ICompletePasswordResetResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password reset was completed successfully."}},"required":["success"],"description":"Confirmation of successful password reset completion.\n\nThis response schema indicates the outcome of attempting to change a password using a reset token. It provides simple feedback on whether the operation was successful.\n\nThe success field will be true if the token was valid, the new password met requirements, and the password was successfully updated in the database. If any part of the process failed (invalid token, weak password, database error), the field will be false.\n\nUpon successful password reset, the system takes additional security measures:\n- The reset token is marked as used (used_at timestamp set)\n- All existing sessions for the user are invalidated, requiring re-authentication\n- An audit log is created to record the security-sensitive operation\n\nThis response allows the client application to inform the user of the outcome and guide them to log in with their new credentials. The simplicity of the response follows the principle of least information disclosure, not revealing specific reasons for failure to prevent enumeration attacks.\n\nThe immediate invalidation of existing sessions is a critical security feature that protects against scenarios where an attacker might have compromised the user's session while the legitimate user is recovering access."},"ITodoListTasks.IRequest":{"type":"object","properties":{"completed":{"type":"boolean","description":"Filter tasks by completion status (true for completed, false for active)."},"createdAt":{"type":"object","properties":{"from":{"type":"string","format":"date-time","description":"Earliest creation date for filtering tasks (inclusive)."},"to":{"type":"string","format":"date-time","description":"Latest creation date for filtering tasks (inclusive)."}},"required":["from","to"],"description":"Filter tasks by creation date range."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of tasks to include per page, capped at 100 for performance."},"order":{"oneOf":[{"const":"asc","description":"Sort order for results (ascending or descending)."},{"const":"desc","description":"Sort order for results (ascending or descending)."}],"description":"Sort order for results (ascending or descending)."},"page":{"type":"integer","minimum":1,"description":"Page number to retrieve in paginated results, starting from 1."},"search":{"type":"string","minLength":1,"description":"Search term to filter tasks by matching against description text."},"sortBy":{"oneOf":[{"const":"createdAt","description":"Field to sort results by."},{"const":"description","description":"Field to sort results by."}],"description":"Field to sort results by."},"completedAt":{"type":"object","properties":{"from":{"type":"string","format":"date-time","description":"Earliest completion date for filtering tasks (inclusive)."},"to":{"type":"string","format":"date-time","description":"Latest completion date for filtering tasks (inclusive)."}},"required":["from","to"],"description":"Filter tasks by completion date range."}},"required":[],"description":"Search criteria and pagination parameters for filtering Todo list tasks.\n\nThis schema defines the parameters available for searching and filtering tasks in the todo list application. It supports advanced query capabilities while maintaining simplicity for basic use cases.\n\nPagination controls (page, limit) allow retrieving specific subsets of tasks, essential for performance when users have many tasks. The limit is capped at 100 items per page to prevent excessively large responses that could impact performance.\n\nThe search field enables full-text searching across task descriptions, supporting partial matches and case-insensitive queries. This allows users to quickly find specific tasks among many.\n\nFiltering by completion status lets users view only active tasks, only completed tasks, or all tasks. This supports common use cases like focusing on pending work or reviewing completed items.\n\nDate-based filtering by createdAt enables finding tasks created within specific time ranges, useful for reviewing recent activity or historical data.\n\nSorting options allow organizing results by creation date or description, in ascending or descending order. The default sorting is typically by createdAt in descending order to show the most recent tasks first.\n\nA new filter for completedAt allows users to find tasks that were completed within specific time ranges, which is useful for productivity tracking and reporting.\n\nAll fields are optional, allowing clients to specify only the criteria they need. A request with no parameters would return all tasks sorted by creation date (newest first) with default pagination. ","x-autobe-prisma-schema":"todo_list_tasks"},"ITodoListTasks":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the task that serves as its primary key in the database and reference point for all operations."},"description":{"type":"string","minLength":1,"maxLength":500,"description":"The task description text that contains the details of what needs to be accomplished by the user."},"completed":{"type":"boolean","description":"Indicator of whether the task has been completed, used to visually distinguish active from finished tasks."},"completedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the task was marked as completed, used for sorting and tracking task completion history."},"createdAt":{"type":"string","format":"date-time","description":"Timestamp indicating when the task was created, used for sorting tasks chronologically."},"updatedAt":{"type":"string","format":"date-time","description":"Timestamp indicating when the task was last modified, used for tracking changes and for cache invalidation."},"userId":{"type":"string","format":"uuid","description":"Identifier of the user who created the task, establishing ownership and access control."}},"required":["id","description","completed","createdAt","updatedAt","userId"],"description":"Represents a single task in the todo list application that belongs to a specific user.\n\nThis schema defines the complete structure of a todo list task, including its content, status, ownership, and temporal metadata. Each task is uniquely identified and associated with a single user who has exclusive control over it.\n\nThe description field contains the essential information about what needs to be done, supporting the core functionality of task tracking. The completed boolean flag enables the application to visually distinguish between pending and finished tasks, typically displayed with strike-through styling.\n\nTemporal fields (createdAt, updatedAt, completedAt) provide important context about the task's lifecycle, enabling chronological sorting, activity tracking, and audit trails. The createdAt and updatedAt fields are system-managed timestamps that reflect when the record was created and last modified.\n\nOwnership is established through the userId field, which references the creator and ensures data privacy by restricting access to only the owning user. This ownership model prevents users from viewing or modifying tasks created by others, maintaining the personal nature of the todo list.\n\nAll fields are required in this schema as they represent essential aspects of task management functionality. ","x-autobe-prisma-schema":"todo_list_tasks"},"ITodoListTasks.ICreate":{"type":"object","properties":{"description":{"type":"string","minLength":1,"maxLength":500,"description":"The text description of the new task to be created, containing the details of what needs to be accomplished."},"completed":{"type":"boolean","description":"The initial completion status of the task when created. Most tasks start as incomplete (false)."}},"required":["description"],"description":"Data for creating a new todo list task.\n\nThis schema defines the information required to create a new task in the todo list application. It captures only the essential business data needed for task creation, excluding system-managed fields.\n\nThe description field is required and must contain at least one non-whitespace character, ensuring that tasks have meaningful content. It supports up to 500 characters to allow detailed task descriptions while preventing excessively long entries.\n\nThe completed field is optional and allows setting the initial state of the task. While most tasks are created as incomplete, this field enables creating tasks that are already marked as completed, which might be useful for backfilling completed work.\n\nNotably, this schema does not include the userId field as it is automatically determined from the authenticated user context. The system will associate the new task with the ID of the authenticated user, preventing users from creating tasks for others and maintaining data ownership integrity.\n\nSystem-managed fields like createdAt, updatedAt, and id are intentionally omitted as they are automatically generated by the system upon creation. This follows security best practices by preventing clients from manipulating creation timestamps or assigning IDs.\n\nThe completedAt field is also excluded from creation as it is only relevant when a task transitions from incomplete to complete status, not at initial creation. ","x-autobe-prisma-schema":"todo_list_tasks"},"ITodoListTask":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the task that serves as the primary key and reference for all operations on this task."},"description":{"type":"string","minLength":1,"maxLength":500,"description":"The textual description of the task that details what action needs to be taken by the user."},"completed":{"type":"boolean","description":"Boolean flag indicating whether the task has been completed, used for visual representation and filtering."},"completedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the task was marked as completed, null if the task is still active or was unmarked."},"createdAt":{"type":"string","format":"date-time","description":"Timestamp indicating when the task was originally created in the system."},"updatedAt":{"type":"string","format":"date-time","description":"Timestamp indicating when the task was last modified, updated on every change to the task."}},"required":["id","description","completed","createdAt","updatedAt"],"description":"Represents a todo list task for viewing and detailed operations.\n\nThis schema defines the structure of a todo list task when retrieved from the system. It includes all essential fields needed to display and interact with a task in the user interface.\n\nThe schema captures the core task information: its unique identifier, description, and completion status. The completion status is represented by a boolean flag that determines how the task is visually presented in the interface (e.g., strike-through text for completed tasks).\n\nTemporal metadata provides important context about the task's lifecycle. The createdAt timestamp shows when the task was originally created, while updatedAt reflects the most recent modification. For completed tasks, completedAt records when the completion occurred, allowing users to track their productivity over time.\n\nSecurity considerations are addressed by excluding the userId field from this response schema. While the backend uses this field for ownership verification, it is not necessary to expose it in the API response, minimizing the data surface area and aligning with the principle of least privilege.\n\nAll fields in this schema are required as they represent fundamental aspects of task management functionality. The system ensures these fields are always populated, with completedAt being null for incomplete tasks rather than absent. ","x-autobe-prisma-schema":"todo_list_tasks"},"ITodoListTask.IUpdate":{"type":"object","properties":{"description":{"type":"string","minLength":1,"maxLength":500,"description":"Updated description text for the task, allowing users to modify the details of what needs to be accomplished."},"completed":{"type":"boolean","description":"New completion status for the task, enabling users to mark tasks as done or reopen completed tasks."}},"required":[],"description":"Contains the fields that can be updated for an existing todo list task.\n\nThis update schema follows the partial update pattern, where all fields are optional to allow flexible modification of task properties. Users can update one or multiple fields in a single request.\n\nThe description field allows modifying the task's content, supporting scenarios where requirements change or additional details need to be added. The updated text will replace the existing description entirely.\n\nThe completed field enables changing the task's status, which is the primary way users interact with tasks in a todo list. When setting completed to true, the system will record the current timestamp in the completedAt field. When setting it to false (reopening a task), the system will clear the completedAt timestamp.\n\nNotably, this schema does not include the userId field, as task ownership is immutable after creation. Users cannot transfer tasks to other users or modify the ownership, maintaining data integrity and privacy.\n\nSystem-managed fields like createdAt, updatedAt, and id are intentionally excluded from updates. The id cannot be changed as it's the primary key. The createdAt timestamp is immutable as it represents the point of creation. The updatedAt timestamp is automatically updated by the system on every modification, ensuring accurate tracking of when changes occur.\n\nThe completedAt field is also not directly modifiable through this schema. Its value is automatically managed by the system based on changes to the completed status, preventing clients from manipulating completion timestamps and ensuring data consistency.\n\nSince all fields are optional, a valid update request could theoretically be empty, though the system may choose to return an error or ignore such requests based on implementation details. ","x-autobe-prisma-schema":"todo_list_tasks"}}}}