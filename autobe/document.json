{"operations":[{"specification":"This operation creates a new user account for the minimalTodo application. Corresponds to the minimal_todo_taskusers table where user identities are stored. Verifies email uniqueness and stores hashed password for authentication access.","authorizationType":"join","description":"This endpoint creates a new user account for the minimalTodo application, enabling users to access their personal task management system.\n\nThe operation initiates the user journey by collecting essential identity information, specifically email and password, which map directly to the `email` and `password_hash` fields in the `minimal_todo_taskusers` table. During account creation, the system verifies email uniqueness against existing records before proceeding, ensuring each user has a distinct identity within the system. The password is securely hashed using industry-standard algorithms before storage in the `password_hash` column, never stored in plaintext.\n\nUpon successful registration, the system automatically authenticates the user and establishes a session for immediate access to task management functionality. The user's `created_at` and `updated_at` timestamps are recorded in Asia/Seoul timezone, reflecting the core business operating region. No other profile information is collected to maintain the minimal feature set philosophy.\n\nSecurity considerations include strict email validation to prevent invalid addresses, password complexity requirements (minimum 8 characters with letters and numbers), and protection against automated account creation attempts through rate limiting. All operations maintain isolation between user accounts, ensuring no cross-user data access.\n\nRelated operations include the login operation for subsequent access, the refresh operation for maintaining session validity, and the password reset functionality for account recovery. This join operation serves as the entry point to the complete authentication workflow, enabling all subsequent task management activities.","summary":"Creates a new user account for task management in the minimalTodo application","parameters":[],"requestBody":{"description":"Email and password for new user account registration","typeName":"IMinimalTodoTaskUser.IJoin"},"responseBody":{"description":"Authentication tokens for immediate access to the application","typeName":"IMinimalTodoTaskUser.IAuthorized"},"authorizationRole":"taskUser","name":"join","path":"/auth/taskUser/join","method":"post"},{"specification":"Authenticates existing users using email and password credentials. Interacts with minimal_todo_taskusers table to verify identity and creates session records in minimal_todo_sessions table upon successful verification.","authorizationType":"login","description":"This endpoint authenticates existing users by verifying their email and password credentials against stored records in the system.\n\nThe operation processes user-submitted credentials by first locating the matching record in the `minimal_todo_taskusers` table using the provided email. It then compares the submitted password with the stored `password_hash` using secure cryptographic verification. During authentication, the system validates that the account is active (where `deleted_at` is null) before granting access, enforcing account status management according to business rules.\n\nUpon successful verification, the system creates a new session record in the `minimal_todo_sessions` table, generating a cryptographically secure token with appropriate expiration. The session includes the user's IP address for security monitoring and establishes a 30-day validity period before requiring re-authentication, balancing security with user convenience as specified in business requirements.\n\nSecurity measures include protection against timing attacks through consistent response times, rate limiting after multiple failed attempts, and generic error messages that don't reveal whether the email or password was incorrect. All password operations occur in memory without logging to maintain security standards. Session tokens are transmitted securely and stored with appropriate HTTP security flags.\n\nRelated operations include the join operation for new users, the refresh operation for maintaining active sessions, and the password reset flows for account recovery. This login operation forms the central authentication point for all returning users, enabling secure access to personal task management functionality while maintaining the minimal security profile appropriate for the application's scope.","summary":"Authenticates users with email and password for the minimalTodo application","parameters":[],"requestBody":{"description":"Email and password credentials for user authentication","typeName":"IMinimalTodoTaskUser.ILogin"},"responseBody":{"description":"Authentication tokens for accessing the application","typeName":"IMinimalTodoTaskUser.IAuthorized"},"authorizationRole":"taskUser","name":"login","path":"/auth/taskUser/login","method":"post"},{"specification":"Extends session validity using a valid refresh token. Validates token against minimal_todo_sessions table, checks expiration, and issues new access tokens upon successful verification.","authorizationType":"refresh","description":"This endpoint validates refresh tokens and issues new access tokens to maintain user sessions without requiring re-authentication with primary credentials.\n\nThe operation processes refresh tokens by locating the corresponding session record in the `minimal_todo_sessions` table, verifying that the token exists and hasn't expired (checking against the `expires_at` timestamp). During token validation, the system compares the current Asia/Seoul time against the stored expiration to determine token validity, ensuring session security while providing convenience for active users.\n\nUpon successful validation, the system generates new authentication tokens and updates the session's expiration time while preserving the associated user identity. The session's `created_at` timestamp remains unchanged as it represents the original authentication event, while security monitoring tracks refresh activity through the session records.\n\nSecurity considerations include single-use tokens for enhanced security, binding tokens to the originating IP address for fraud detection, and strict expiration policies that limit token lifespan. The refresh mechanism operates independently from primary authentication to minimize exposure of user credentials while maintaining session continuity.\n\nRelated operations include the login operation that creates the initial session, and the password reset flows that invalidate existing sessions. This refresh operation supports the business requirement for maintaining active user sessions for 30 days of inactivity, enhancing user experience while adhering to appropriate security standards for the minimalTodo application's scope.","summary":"Refreshes authentication tokens using a valid refresh token","parameters":[],"requestBody":{"description":"Refresh token to validate and exchange for new access tokens","typeName":"IMinimalTodoTaskUser.IRefresh"},"responseBody":{"description":"New authentication tokens with extended validity","typeName":"IMinimalTodoTaskUser.IAuthorized"},"authorizationRole":"taskUser","name":"refresh","path":"/auth/taskUser/refresh","method":"post"},{"specification":"Initiates password recovery process by creating a reset token. Uses minimal_todo_password_resets table to store time-limited single-use tokens associated with user accounts.","authorizationType":null,"description":"This endpoint initiates the password recovery process by creating and delivering a secure reset token to the user's registered email address.\n\nThe operation processes email submissions by first verifying the email exists in the `minimal_todo_taskusers` table. Upon confirmation, it creates a new record in the `minimal_todo_password_resets` table containing a cryptographically secure token with a 15-minute expiration (recorded in `expires_at`). The token is single-use by design, enforced through the unique constraint on `minimal_todo_taskuser_id` in the password resets table.\n\nThe system delivers the reset token to the user's verified email address, providing clear instructions with expiration details. The reset process maintains security by not revealing whether an email exists in the system, protecting against user enumeration attacks. All password reset operations occur in Asia/Seoul timezone for consistent time-based validation.\n\nTechnical implementation follows security best practices including token randomness, short expiration windows, and automatic cleanup of expired tokens. The design intentionally avoids security questions or additional personal information requirements to maintain the minimal feature set while ensuring security.\n\nRelated operations include the password reset completion flow that validates tokens and updates credentials. This reset request operation fulfills the business requirement for secure account recovery while maintaining the application's minimalist philosophy, providing users a reliable path to regain access without compromising security standards.","summary":"Requests password reset by email for account recovery","parameters":[],"requestBody":{"description":"Email address to initiate password recovery process","typeName":"IMinimalTodoTaskUser.IPasswordResetRequest"},"responseBody":null,"authorizationRole":null,"name":"resetPasswordRequest","path":"/auth/taskUser/password/resets","method":"post"},{"specification":"Completes password recovery by validating token and updating credentials. Verifies token against minimal_todo_password_resets table and updates password_hash in minimal_todo_taskusers table upon success.","authorizationType":null,"description":"This endpoint completes the password recovery process by validating a reset token and updating the user's password credentials.\n\nThe operation processes token validation by locating the corresponding record in the `minimal_todo_password_resets` table using the provided token path parameter. It verifies the token hasn't expired by comparing current Asia/Seoul time against the `expires_at` timestamp and ensures the token hasn't been previously used through the unique constraint on `minimal_todo_taskuser_id`.\n\nUpon successful token validation, the system updates the associated user's `password_hash` in the `minimal_todo_taskusers` table with the new securely hashed password. The operation immediately invalidates all active sessions for the user by removing related records from the `minimal_todo_sessions` table, ensuring previous access is terminated as a security measure following credential changes.\n\nSecurity considerations include single-use token enforcement, short 15-minute validity window, password complexity validation matching registration requirements, and automatic cleanup of the password reset record after successful completion. The design intentionally avoids revealing specific failure reasons to prevent information leakage.\n\nRelated operations include the password reset request flow that initiates the recovery process. This completion operation fulfills the business requirement for secure password management while maintaining the minimal feature set philosophy, ensuring users can recover account access without compromising application security standards or introducing unnecessary complexity.","summary":"Completes password reset using validation token","parameters":[{"name":"token","description":"Validation token for password reset confirmation","schema":{"type":"string","pattern":"^[a-zA-Z0-9-_=]{22,}$"}}],"requestBody":{"description":"New password credentials for account recovery","typeName":"IMinimalTodoTaskUser.IPasswordResetComplete"},"responseBody":null,"authorizationRole":null,"name":"resetPasswordComplete","path":"/auth/taskUser/password/resets/{token}","method":"patch"},{"prisma_schemas":"/// Core business entity representing user tasks in the minimalTodo\\n/// application. Contains essential information about intended work items\\n/// including title, status, and timestamps. Represents the fundamental value\\n/// proposition of the Todo application as a standalone entity that delivers\\n/// the primary user value. This model enables users to create, track, and\\n/// complete tasks with minimal complexity while preserving historical\\n/// context through timestamp tracking. All operations revolve around this\\n/// entity as it embodies the minimalist philosophy of the entire\\n/// application.\\n///\\n/// @namespace Tasks\\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\\nmodel minimal_todo_tasks {\\n//----\\n// COLUMNS\\n//----\\n/// Primary Key.\\nid String @id @db.Uuid\\n\\n/// Belonged task user's {@link minimal_todo_taskusers.id}\\ntaskuser_id String @db.Uuid\\n\\n/// Title of the task representing what needs to be done. Limited to 100\\n/// characters to ensure conciseness and compatibility with minimal interface\\n/// design.\\ntitle String\\n\\n/// Current business status of the task with only two valid values:\\n/// 'incomplete' (default) and 'complete'. Maintains simplicity by avoiding\\n/// additional states consistent with minimal feature philosophy.\\nstatus String\\n\\n/// Timestamp representing when the task was initially created. Preserved as\\n/// an immutable business record of when the user conceived the work item.\\ncreated_at DateTime @db.Timestamptz\\n\\n/// Timestamp recording when the task was marked complete. Used for\\n/// historical accuracy and completion tracking while maintaining business\\n/// integrity.\\ncompleted_at DateTime? @db.Timestamptz\\n\\n//----\\n// RELATIONS\\n//----\\ntaskUser minimal_todo_taskusers @relation(fields: [taskuser_id], references: [id], onDelete: Cascade)\\n\\n@@index([taskuser_id, created_at])\\n@@index([created_at])\\n@@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\\n}","model_name":"minimal_todo_tasks","soft_delete_column":null,"description":"Retrieve a filtered and paginated list of tasks associated with the authenticated user. This operation supports comprehensive search capabilities allowing users to filter tasks by status, title, creation date, and completion status with various operators including exact match, partial match (contains), and date range filtering.\n\nThe operation integrates with the minimal_todo_tasks table as defined in the Prisma schema, incorporating all available task fields and relationships. The response includes task summary information optimized for list displays, with pagination information in the response envelope.\n\nSecurity considerations include user data isolation to ensure users can only access their own tasks, and appropriate filtering of sensitive information based on authorization level. The operation is scoped to the authenticated user's context, ensuring data privacy and security compliance.","specification":"This operation retrieves a paginated list of tasks from the minimalTodo application's database, allowing users to search, filter, and sort their tasks. It operates on the minimal_todo_tasks table and supports complex queries to find tasks based on various criteria including title, status, creation date, and completion status.","summary":"Search and retrieve a filtered, paginated list of tasks for the authenticated user","path":"/minimalTodo/taskUser/tasks","parameters":[{"name":"status","description":"Filter tasks by their completion status. Only 'incomplete' and 'complete' are valid values as defined in the business requirements.","schema":{"type":"string"}},{"name":"title","description":"Filter tasks by title using partial matching (case-insensitive). Limited to 100 characters as per business requirements.","schema":{"type":"string"}},{"name":"createdAt","description":"Filter tasks by creation date range, allowing users to find tasks created within specific time periods. Stored and transmitted in ISO 8601 format with timezone information to maintain business operational standards in Asia/Seoul timezone.","schema":{"type":"string","format":"date-time"}},{"name":"completedAt","description":"Filter tasks that have been completed within a specific date range, allowing users to review their completed work history. Represented in ISO 8601 format with timezone information to ensure temporal accuracy across different user sessions.","schema":{"type":"string","format":"date-time"}}],"requestBody":{"description":"Search criteria including filtering options, pagination parameters (page, limit), and sorting preferences for retrieving tasks","typeName":"IMinimalTodoTask.IRequest"},"responseBody":{"description":"Paginated list of task summary information matching search criteria","typeName":"IPageIMinimalTodoTask.ISummary"},"name":"search","method":"patch","authorizationRole":"taskUser","authorizationType":null},{"prisma_schemas":"/// Core business entity representing user tasks in the minimalTodo\\n/// application. Contains essential information about intended work items\\n/// including title, status, and timestamps. Represents the fundamental value\\n/// proposition of the Todo application as a standalone entity that delivers\\n/// the primary user value. This model enables users to create, track, and\\n/// complete tasks with minimal complexity while preserving historical\\n/// context through timestamp tracking. All operations revolve around this\\n/// entity as it embodies the minimalist philosophy of the entire\\n/// application.\\n///\\n/// @namespace Tasks\\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\\nmodel minimal_todo_tasks {\\n//----\\n// COLUMNS\\n//----\\n/// Primary Key.\\nid String @id @db.Uuid\\n\\n/// Belonged task user's {@link minimal_todo_taskusers.id}\\ntaskuser_id String @db.Uuid\\n\\n/// Title of the task representing what needs to be done. Limited to 100\\n/// characters to ensure conciseness and compatibility with minimal interface\\n/// design.\\ntitle String\\n\\n/// Current business status of the task with only two valid values:\\n/// 'incomplete' (default) and 'complete'. Maintains simplicity by avoiding\\n/// additional states consistent with minimal feature philosophy.\\nstatus String\\n\\n/// Timestamp representing when the task was initially created. Preserved as\\n/// an immutable business record of when the user conceived the work item.\\ncreated_at DateTime @db.Timestamptz\\n\\n/// Timestamp recording when the task was marked complete. Used for\\n/// historical accuracy and completion tracking while maintaining business\\n/// integrity.\\ncompleted_at DateTime? @db.Timestamptz\\n\\n//----\\n// RELATIONS\\n//----\\ntaskUser minimal_todo_taskusers @relation(fields: [taskuser_id], references: [id], onDelete: Cascade)\\n\\n@@index([taskuser_id, created_at])\\n@@index([created_at])\\n@@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\\n}","model_name":"minimal_todo_tasks","soft_delete_column":null,"description":"Retrieve a single task by its unique identifier with all detailed information including title, status, creation timestamp, and completion timestamp if applicable. This operation provides specific access to individual tasks when users need detailed information beyond what's available in list views.\n\nThe operation integrates with the minimal_todo_tasks table as defined in the Prisma schema, ensuring consistent access to the complete task data. Security considerations include user data isolation to ensure users can only access their own tasks, with authorization checks performed before returning any task details.\n\nPerformance considerations ensure rapid retrieval of single tasks, with response times optimized for immediate feedback. The operation supports common user scenarios such as viewing task details before completion or reviewing completed tasks in full detail.","specification":"This operation retrieves a specific task from the minimalTodo application's database by its unique identifier. It provides detailed access to individual task records for authenticated users, ensuring they can view complete information about any task they own.","summary":"Retrieve detailed information about a specific task","path":"/minimalTodo/taskUser/tasks/{taskId}","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"format":"uuid","type":"string"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested task","typeName":"IMinimalTodoTask"},"name":"detail","method":"get","authorizationRole":"taskUser","authorizationType":null},{"prisma_schemas":"/// Core business entity representing user tasks in the minimalTodo\\n/// application. Contains essential information about intended work items\\n/// including title, status, and timestamps. Represents the fundamental value\\n/// proposition of the Todo application as a standalone entity that delivers\\n/// the primary user value. This model enables users to create, track, and\\n/// complete tasks with minimal complexity while preserving historical\\n/// context through timestamp tracking. All operations revolve around this\\n/// entity as it embodies the minimalist philosophy of the entire\\n/// application.\\n///\\n/// @namespace Tasks\\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\\nmodel minimal_todo_tasks {\\n//----\\n// COLUMNS\\n//----\\n/// Primary Key.\\nid String @id @db.Uuid\\n\\n/// Belonged task user's {@link minimal_todo_taskusers.id}\\ntaskuser_id String @db.Uuid\\n\\n/// Title of the task representing what needs to be done. Limited to 100\\n/// characters to ensure conciseness and compatibility with minimal interface\\n/// design.\\ntitle String\\n\\n/// Current business status of the task with only two valid values:\\n/// 'incomplete' (default) and 'complete'. Maintains simplicity by avoiding\\n/// additional states consistent with minimal feature philosophy.\\nstatus String\\n\\n/// Timestamp representing when the task was initially created. Preserved as\\n/// an immutable business record of when the user conceived the work item.\\ncreated_at DateTime @db.Timestamptz\\n\\n/// Timestamp recording when the task was marked complete. Used for\\n/// historical accuracy and completion tracking while maintaining business\\n/// integrity.\\ncompleted_at DateTime? @db.Timestamptz\\n\\n//----\\n// RELATIONS\\n//----\\ntaskUser minimal_todo_taskusers @relation(fields: [taskuser_id], references: [id], onDelete: Cascade)\\n\\n@@index([taskuser_id, created_at])\\n@@index([created_at])\\n@@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\\n}","model_name":"minimal_todo_tasks","soft_delete_column":null,"description":"Create a new task for the authenticated user with a title and initial incomplete status. This operation allows users to capture new work items quickly, supporting the core use case of task creation with minimal friction. The system automatically assigns a unique identifier and creation timestamp, with the task defaulting to incomplete status.\n\nThe operation validates input against business rules, ensuring task titles are provided and do not exceed 100 characters. Security considerations ensure proper user context and data isolation, with the system automatically associating the new task with the authenticated user.\n\nPerformance expectations ensure immediate task creation with visual feedback appearing within 200ms of submission, supporting the application's responsiveness requirements. The operation supports the key user scenario of capturing tasks during meetings or other time-sensitive situations where speed is essential.","specification":"This operation creates a new task in the minimalTodo application's database for the authenticated user. It represents the first step in the task management lifecycle, allowing users to record new work items that need to be accomplished.","summary":"Create a new task with title and default incomplete status","path":"/minimalTodo/taskUser/tasks","parameters":[],"requestBody":{"description":"Task creation data including title (required) and optional description","typeName":"IMinimalTodoTask.ICreate"},"responseBody":{"description":"The created task with all system-assigned fields","typeName":"IMinimalTodoTask"},"name":"create","method":"post","authorizationRole":"taskUser","authorizationType":null},{"prisma_schemas":"/// Core business entity representing user tasks in the minimalTodo\\n/// application. Contains essential information about intended work items\\n/// including title, status, and timestamps. Represents the fundamental value\\n/// proposition of the Todo application as a standalone entity that delivers\\n/// the primary user value. This model enables users to create, track, and\\n/// complete tasks with minimal complexity while preserving historical\\n/// context through timestamp tracking. All operations revolve around this\\n/// entity as it embodies the minimalist philosophy of the entire\\n/// application.\\n///\\n/// @namespace Tasks\\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\\nmodel minimal_todo_tasks {\\n//----\\n// COLUMNS\\n//----\\n/// Primary Key.\\nid String @id @db.Uuid\\n\\n/// Belonged task user's {@link minimal_todo_taskusers.id}\\ntaskuser_id String @db.Uuid\\n\\n/// Title of the task representing what needs to be done. Limited to 100\\n/// characters to ensure conciseness and compatibility with minimal interface\\n/// design.\\ntitle String\\n\\n/// Current business status of the task with only two valid values:\\n/// 'incomplete' (default) and 'complete'. Maintains simplicity by avoiding\\n/// additional states consistent with minimal feature philosophy.\\nstatus String\\n\\n/// Timestamp representing when the task was initially created. Preserved as\\n/// an immutable business record of when the user conceived the work item.\\ncreated_at DateTime @db.Timestamptz\\n\\n/// Timestamp recording when the task was marked complete. Used for\\n/// historical accuracy and completion tracking while maintaining business\\n/// integrity.\\ncompleted_at DateTime? @db.Timestamptz\\n\\n//----\\n// RELATIONS\\n//----\\ntaskUser minimal_todo_taskusers @relation(fields: [taskuser_id], references: [id], onDelete: Cascade)\\n\\n@@index([taskuser_id, created_at])\\n@@index([created_at])\\n@@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\\n}","model_name":"minimal_todo_tasks","soft_delete_column":null,"description":"Update an existing task's details including its title and status. This operation supports the core task management lifecycle, allowing users to modify task information as their work progresses. When updating a task to complete status, the system records the completion timestamp; when updating from complete to incomplete, the system removes the completion timestamp while preserving the creation timestamp.\n\nThe operation validates input against business rules, ensuring titles do not exceed 100 characters and required fields are properly provided. Security considerations include user data isolation to ensure users can only modify their own tasks, with proper authorization checks performed before any updates.\n\nPerformance expectations ensure immediate updates with changes reflected instantly in the interface, supporting the application's responsiveness requirements. The operation supports common user scenarios such as updating task titles for clarity or marking tasks as complete once work has been accomplished.","specification":"This operation updates an existing task in the minimalTodo application's database by its unique identifier. It allows authenticated users to modify task details such as title and status, supporting the ongoing management of tasks throughout their lifecycle.","summary":"Update an existing task's title and status","path":"/minimalTodo/taskUser/tasks/{taskId}","parameters":[{"name":"taskId","description":"Unique identifier of the task to update","schema":{"format":"uuid","type":"string"}}],"requestBody":{"description":"Task update data including new title, status, and optional description","typeName":"IMinimalTodoTask.IUpdate"},"responseBody":{"description":"The updated task with all current fields","typeName":"IMinimalTodoTask"},"name":"update","method":"put","authorizationRole":"taskUser","authorizationType":null},{"prisma_schemas":"/// Core business entity representing user tasks in the minimalTodo\\n/// application. Contains essential information about intended work items\\n/// including title, status, and timestamps. Represents the fundamental value\\n/// proposition of the Todo application as a standalone entity that delivers\\n/// the primary user value. This model enables users to create, track, and\\n/// complete tasks with minimal complexity while preserving historical\\n/// context through timestamp tracking. All operations revolve around this\\n/// entity as it embodies the minimalist philosophy of the entire\\n/// application.\\n///\\n/// @namespace Tasks\\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\\nmodel minimal_todo_tasks {\\n//----\\n// COLUMNS\\n//----\\n/// Primary Key.\\nid String @id @db.Uuid\\n\\n/// Belonged task user's {@link minimal_todo_taskusers.id}\\ntaskuser_id String @db.Uuid\\n\\n/// Title of the task representing what needs to be done. Limited to 100\\n/// characters to ensure conciseness and compatibility with minimal interface\\n/// design.\\ntitle String\\n\\n/// Current business status of the task with only two valid values:\\n/// 'incomplete' (default) and 'complete'. Maintains simplicity by avoiding\\n/// additional states consistent with minimal feature philosophy.\\nstatus String\\n\\n/// Timestamp representing when the task was initially created. Preserved as\\n/// an immutable business record of when the user conceived the work item.\\ncreated_at DateTime @db.Timestamptz\\n\\n/// Timestamp recording when the task was marked complete. Used for\\n/// historical accuracy and completion tracking while maintaining business\\n/// integrity.\\ncompleted_at DateTime? @db.Timestamptz\\n\\n//----\\n// RELATIONS\\n//----\\ntaskUser minimal_todo_taskusers @relation(fields: [taskuser_id], references: [id], onDelete: Cascade)\\n\\n@@index([taskuser_id, created_at])\\n@@index([created_at])\\n@@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\\n}","model_name":"minimal_todo_tasks","soft_delete_column":null,"description":"Remove a task from the user's task list, triggering CASCADE deletion of any related records as defined by the database schema. This operation leverages the database's CASCADE constraint to automatically clean up dependent data and maintain referential integrity. The task and its associated dependent records are completely removed from both user access and system storage.\n\nSecurity considerations include user data isolation to ensure users can only delete their own tasks, with proper authorization checks performed before the deletion operation. The system does not provide recovery for deleted tasks, consistent with the minimal implementation philosophy, so users receive confirmation of permanent removal.\n\nThe operation takes advantage of the database-level CASCADE deletion defined in the Prisma schema (@relation(onDelete: Cascade)), which automatically handles cleanup of related records to preserve data integrity. While backup systems may retain the data for disaster recovery purposes, the task and its dependent data are immediately and permanently removed from all application views and user-accessible interfaces.","specification":"This operation deletes a task from the minimalTodo application's database by its unique identifier and triggers CASCADE deletion of related records due to the database schema constraints. It provides authenticated users with the ability to permanently remove tasks they no longer need, with the database automatically handling cleanup of dependent data to maintain referential integrity.","summary":"Remove a task and trigger CASCADE deletion of related records","path":"/minimalTodo/taskUser/tasks/{taskId}","parameters":[{"name":"taskId","description":"Unique identifier of the task to delete","schema":{"format":"uuid","type":"string"}}],"requestBody":null,"responseBody":null,"name":"erase","method":"delete","authorizationRole":"taskUser","authorizationType":null}],"components":{"authorization":[{"name":"taskUser","description":"Authenticated user who can create, read, update, and delete their own todo tasks with no sharing capabilities","kind":"member"}],"schemas":{"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IMinimalTodoTaskUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nThe unique identifier for the user account. This UUID serves as the primary key in the database and is used to reference this user across all system operations.\n\nAll user operations (tasks, sessions, password resets) are linked to this identifier, ensuring data integrity and proper ownership relationships throughout the system. The UUID format provides global uniqueness and prevents enumeration attacks that could occur with sequential identifiers.\n\nDuring authentication flows, the identifier is verified against session records to ensure the user is properly authenticated before allowing access to protected resources. It is never modified after account creation and serves as a stable reference point for the user's entire lifecycle within the application.\n\nThe identifier is included in all user responses except during authentication operations where it is embedded within the token payload for security reasons."},"email":{"type":"string","format":"email","description":"Verified email address used for authentication and account recovery. Must be unique across all users.\n\nThe email serves as the primary authentication identifier for the user account. It is verified during the registration process through a confirmation email containing a time-limited verification code. Once verified, it becomes the immutable identity for the account.\n\nEmail uniqueness is enforced at the database level with a unique constraint, preventing multiple accounts with the same email address. This ensures each user has a distinct identity within the system and prevents confusion or account conflicts.\n\nThe email is used for critical account operations including login, password recovery, and security notifications. It is never shared with other users as the system maintains strict data isolation between accounts.\n\nDuring password reset operations, the email is used to send verification codes but generic error messages are returned to prevent user enumeration attacks. The system does not reveal whether an email exists in the database to maintain user privacy and security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nRecords the exact date and time when the user account was initially registered in the system. This timestamp is set once at account creation and never modified, serving as an immutable business record of when the user joined the service.\n\nAll timestamps in the system use ISO 8601 format with timezone information (UTC+9) corresponding to Asia/Seoul, the core business operating region. This ensures consistency across all temporal operations and displays the correct local time to users in the primary market.\n\nThe creation timestamp is used for various business purposes including:\n- Calculating account age\n- Determining eligibility for time-based promotions\n- Analytics and reporting on user acquisition\n- Displaying \"Member since\" information in the user interface\n\nIt is included in all user summary and detailed responses but is not modifiable by the user through any API operation, maintaining data integrity and preventing potential security issues."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last account modification.\n\nRecords the date and time of the most recent update to the user account. This includes operations such as password changes, profile modifications, or any other account updates. The timestamp is automatically updated by the system whenever any field in the user record is modified.\n\nLike all timestamps in the system, this uses ISO 8601 format with timezone information (UTC+9) corresponding to Asia/Seoul, ensuring temporal consistency across operations. This timestamp helps users understand when their account information was last changed and provides audit trail information for security purposes.\n\nThe update timestamp is automatically managed by the system and cannot be manipulated directly by users. It serves as a reliable indicator of account activity and helps detect potential unauthorized access if unexpected changes are observed.\n\nThis field is included in detailed user responses but may be omitted from summary views to reduce payload size when full account details are not required."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the account was marked for deletion. Null for active accounts.\n\nIndicates when a user account was deactivated or scheduled for deletion. When a user requests account deletion, this field is populated with the current timestamp in Asia/Seoul timezone, marking the account as inactive.\n\nThe presence of a value in this field determines whether the account is considered active. Accounts with a non-null deletedAt timestamp are treated as inactive and cannot be used for authentication. This supports the soft delete pattern, allowing for potential recovery within a limited grace period before permanent removal.\n\nDuring authentication operations, the system checks this field and denies access to accounts that have been marked for deletion. The field enables implementation of a 7-day grace period for account recovery before permanent data removal, satisfying data subject rights under privacy regulations while maintaining system security.\n\nAfter the grace period, accounts with a deletedAt timestamp are permanently removed from the system along with all associated data. Until that time, the account information remains in the database but is inaccessible to the user and hidden from all application views."},{"type":"null"}],"description":"Timestamp when the account was marked for deletion. Null for active accounts.\n\nIndicates when a user account was deactivated or scheduled for deletion. When a user requests account deletion, this field is populated with the current timestamp in Asia/Seoul timezone, marking the account as inactive.\n\nThe presence of a value in this field determines whether the account is considered active. Accounts with a non-null deletedAt timestamp are treated as inactive and cannot be used for authentication. This supports the soft delete pattern, allowing for potential recovery within a limited grace period before permanent removal.\n\nDuring authentication operations, the system checks this field and denies access to accounts that have been marked for deletion. The field enables implementation of a 7-day grace period for account recovery before permanent data removal, satisfying data subject rights under privacy regulations while maintaining system security.\n\nAfter the grace period, accounts with a deletedAt timestamp are permanently removed from the system along with all associated data. Until that time, the account information remains in the database but is inaccessible to the user and hidden from all application views."}},"required":["id","email","created_at","updated_at"],"description":"User account information for authentication and identity management.\n\nStores essential details required for secure system access and account recovery. This entity represents the foundation of the application's security model, managing user identities and authentication state throughout the system.\n\nEach user account is uniquely identified by a UUID and associated with a verified email address that serves as the primary login credential. The account stores a securely hashed password using industry-standard algorithms (never exposed in responses), ensuring security.\n\nThe user entity maintains a complete audit trail of account lifecycle through creation, update, and deletion timestamps. The soft delete pattern implemented through the deleted_at field allows for a 7-day grace period before permanent data removal.\n\nUser data isolation is strictly enforced, ensuring each user can only access their own tasks. All operations on user accounts include appropriate security logging and monitoring.\n\nCRITICAL SECURITY NOTE: This response type deliberately excludes password_hash and organizerMemberId fields that appeared in the original schema. These fields were security vulnerabilities as they exposed sensitive data in responses. Password management occurs through secure authentication flows, not direct field access."},"IMinimalTodoTaskUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Verified email address used for authentication and account recovery. Must be unique across all users.\n\nThe email serves as the primary identifier for the user account. During registration, the system validates the format and checks for uniqueness against existing accounts.\n\nIf an email is already registered, the system returns a specific error message without revealing information that could aid in user enumeration attacks. The validation ensures data quality by preventing invalid or malformed email addresses.\n\nThe email is used for account verification and recovery processes. Users must verify ownership through a confirmation process before the account becomes active.\n\nThe system implements rate limiting on registration attempts to prevent abuse and automated account creation."},"password":{"type":"string","description":"Plaintext password provided by the user during registration.\n\nThe password must meet minimum complexity requirements of at least 8 characters with a combination of letters and numbers. The system validates this requirement before accepting the registration.\n\nDuring the join operation, the plaintext password is securely hashed using industry-standard algorithms before storage. The original plaintext password is immediately discarded after hashing and never stored, transmitted, or logged.\n\nThe join operation automatically authenticates the user upon successful registration, eliminating the need for a separate login step and improving user experience."}},"required":["email","password"],"description":"Request data for creating a new user account in the minimalTodo application.\n\nContains the essential credentials required for user registration: email and password. These represent the minimum information needed to establish a secure user identity.\n\nThe email serves as the unique identifier for the account. The password is securely hashed before storage, never transmitted or stored in plaintext.\n\nSecurity Note: This request type is ONLY valid for request bodies. It must NEVER appear in response bodies as it contains sensitive authentication credentials."},"IMinimalTodoTaskUser.IAuthorized":{"type":"object","properties":{"user":{"$ref":"#/components/schemas/IMinimalTodoTaskUser","description":"The authenticated user account with all available details.\n\nContains the complete user profile information for the authenticated session, excluding sensitive fields like password_hash for security reasons.\n\nThe user information includes identifying details (id, email), timestamp information (created_at, updated_at), and the deleted_at status. This provides the client application with necessary user context for personalized experiences while maintaining data protection standards.\n\nThe user object is populated from the authenticated session context and represents the current state of the user's account at the time of token issuance."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["user","token"],"description":"Authentication response containing user details and access tokens.\n\nReturned by authentication operations (join, login, refresh) to provide the client with all necessary information to establish and maintain an authenticated session.\n\nThe response includes the complete user profile (excluding sensitive information) and a token object containing access and refresh tokens. This allows the client to immediately personalize the user interface while using the tokens to authenticate subsequent requests.\n\nThe structure supports the application's security model by never exposing passwords or other sensitive authentication material in the response."},"IMinimalTodoTaskUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Verified email address used for authentication. The system locates the user account by this identifier before proceeding with password verification.\n\nThe email format is validated to ensure it follows standard local@domain pattern. Malformed emails are rejected with specific validation errors.\n\nThe system implements rate limiting on failed login attempts to prevent brute force attacks. After multiple consecutive failures, the account may be temporarily locked or require additional verification steps."},"password":{"type":"string","description":"Plaintext password provided by the user during authentication.\n\nThe password is compared against the stored password_hash using secure cryptographic verification. The comparison is performed in constant time to prevent timing attacks.\n\nThe system never stores or logs the plaintext password. It is only held in memory during the authentication process and immediately discarded."}},"required":["email","password"],"description":"Credentials for authenticating a user in the minimalTodo application.\n\nContains the email and password required to verify a user's identity. This request structure is used for the login operation.\n\nThe email serves as the identifier to locate the user account. The password is used to verify ownership through cryptographic comparison.\n\nSecurity Note: This request type is ONLY valid for request bodies. It must NEVER appear in response bodies as it contains sensitive authentication credentials."},"IMinimalTodoTaskUser.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Cryptographically secure token used to obtain new access tokens without requiring primary credentials.\n\nThe refresh token is issued during initial authentication and stored securely with an expiration date. During the refresh operation, the system validates that the token exists, hasn't expired, and is associated with an active user account.\n\nRefresh tokens are single-use by design, meaning they are invalidated after being used to obtain new tokens. The token is bound to the user's authentication context and IP address for security."}},"required":["refreshToken"],"description":"Request data for refreshing an existing authentication session.\n\nContains the refresh token needed to extend session validity without requiring the user to re-enter their primary credentials.\n\nThis supports the \"remember me\" functionality that allows users to maintain access to the application for extended periods while maintaining security through token rotation."},"IMinimalTodoTaskUser.IPasswordResetRequest":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address to initiate the password recovery process.\n\nThe email is used to locate the user account and initiate the password reset workflow. The system verifies that the email exists in the database before proceeding.\n\nThe system does not reveal whether the email is registered to prevent user enumeration attacks. If valid, the system creates a time-limited reset token valid for 15 minutes.\n\nThe system implements rate limiting on reset requests to prevent abuse."}},"required":["email"],"description":"Request to initiate the password recovery process for a user account.\n\nContains the email address associated with the account for which password recovery is requested.\n\nThe operation follows security best practices by not revealing whether the email exists in the system. Upon receiving a valid request, the system creates a time-limited token and sends recovery instructions to the user's email."},"IMinimalTodoTaskUser.IPasswordResetComplete":{"type":"object","properties":{"password":{"type":"string","description":"New password to set for the user account during recovery.\n\nThe password must meet the same complexity requirements as during account registration. The system validates these requirements before accepting the new password.\n\nDuring the reset completion, the plaintext password is securely hashed before storing in the password_hash field. The original plaintext is immediately discarded after hashing.\n\nUpon successful password update, the system invalidates all existing sessions for the user to protect against unauthorized access with the old password."}},"required":["password"],"description":"New password credentials for completing the password recovery process.\n\nContains the new password that will be set for the user account after successful token validation.\n\nThe password must meet minimum complexity requirements. Upon successful processing, the system securely hashes the new password and updates the password_hash field.\n\nCritical security measures include validating the reset token, invalidating all active sessions, and protecting against replay attacks through the single-use token mechanism."},"IMinimalTodoTask":{"description":"Core business entity representing user tasks in the minimalTodo application.\n\nThis model serves as the fundamental value proposition of the Todo application, enabling users to create, track, and complete tasks with minimal complexity. The task entity embodies the minimalist philosophy of the entire application, allowing users to capture and manage their work items through a streamlined interface that avoids feature bloat.\n\nThe model contains essential information about intended work items, including title (required field limited to 100 characters), status (with only two valid values: 'incomplete' and 'complete'), and timestamps (creation and completion). These fields support the complete task lifecycle from creation through completion, preserving historical context through timestamp tracking while maintaining simplicity in data structure.\n\nEach task is associated with a specific user through the taskuser_id field, establishing ownership and ensuring user data isolation across the system. The database schema enforces referential integrity through the foreign key relationship to minimal_todo_taskusers table, with CASCADE deletion handling cleanup of dependent records when a user account is removed.\n\nThe model is heavily indexed for optimal query performance, with indexes on taskuser_id and created_at for user-specific task retrieval, and a full-text search index on the title field using PostgreSQL's pg_trgm extension for efficient partial matching and fuzzy search capabilities. This indexing strategy supports the various search and filtering operations required by the business use cases, particularly the comprehensive search functionality for finding tasks by title.\n\nBusiness logic constraints limit the status field to only two values to maintain simplicity, as specified in the requirements. The title field is restricted to 100 characters to ensure conciseness and compatibility with minimal interface design principles, while allowing sufficient space for descriptive task titles.\n\nThe entity interacts with several other components in the system: it's created and accessed through authentication-protected endpoints that verify user authorization, supports various search and filtering operations through the IRequest search parameters, and provides different views of the data through ISummary and full entity representations. The task model's simplicity enables rapid operations with responses appearing within 200ms of submission, supporting the application's responsiveness requirements.\n\nData persistence follows transactional integrity principles, ensuring all modifications are properly committed or rolled back to maintain data consistency across all operations. Backup systems automatically archive user data daily to protect against data loss from system failures, with retention policies maintaining historical data for 30 days.\n\nThe model directly implements the core requirements specified in the business documentation, including task creation with validation rules, status management with automatic timestamp recording, comprehensive search capabilities, and secure data isolation between users. These requirements are translated directly into the database schema structure and validation rules that enforce data quality and business rules at the database level.\n\nTimestamps are stored in ISO 8601 format with timezone information, specifically using Asia/Seoul timezone as the business operational standard. This ensures temporal consistency across all operations and prevents timezone-related issues when users access their tasks from different geographic locations.\n\nRelated entities include the minimal_todo_taskusers table for user identity and authentication context, with the relationship ensuring users can only access their own tasks. The entity participates in the complete authentication and authorization workflow, from user login through task operations, with all access controlled through verified authentication tokens and user context."},"IMinimalTodoTask.ICreate":{"description":"Request data for creating a new task.\n\nThis variant type defines the structure of the request body for the create operation, containing only the fields that should be provided by the client when creating a new task. It represents the minimal set of information required to initiate a new work item in the system.\n\nThe create type includes only the title field as required, reflecting the business rule that a task must have a descriptive title to be useful. This field is the only one that clients should provide during task creation, as all other fields are either system-generated or derived from context.\n\nThe creation process automatically populates several fields that are not included in this request type: the id (generated as a UUID), taskuser_id (set from the authenticated user context), status (defaulted to 'incomplete'), and created_at (set to the current timestamp). This ensures data integrity and prevents clients from spoofing ownership or manipulating system-generated values.\n\nBy defining this as a named type that excludes the owner identifier (taskuser_id), the system enforces proper security boundaries and prevents users from creating tasks for other users. The authenticated user context is used server-side to establish ownership, eliminating the need for clients to specify this information and reducing the attack surface for ownership spoofing.\n\nThe create type supports the business requirement for quick task capture by minimizing the number of required fields, allowing users to record ideas with minimal effort. The simplicity of the interface encourages usage and supports the core use case of rapid task recording during meetings or other time-sensitive situations.\n\nValidation rules enforce the 100-character limit on the title field and prevent empty titles, ensuring data quality while providing clear feedback to users. These rules are applied server-side to prevent bypassing through direct API calls, maintaining consistency across all client implementations.\n\nThe absence of the description field in this create type (despite mentions in requirements) aligns with the provided schema which does not include a description column. This demonstrates adherence to the actual implementation over potentially outdated documentation, ensuring the API contract matches the database structure.\n\n> The ICreate variant is not explicitly defined in the Prisma schema but is derived from the business requirement for simple task creation, including only the title field that users should provide when creating new tasks."},"IMinimalTodoTask.IUpdate":{"description":"Request data for modifying an existing task.\n\nThis variant type defines the structure of the request body for the update operation, containing all fields that can be modified on an existing task. All fields are optional to support partial updates, allowing clients to change only specific aspects of a task without needing to resend unchanged data.\n\nThe update type includes title and status as optional fields, reflecting the business rules for task modification. The title field allows users to edit the task's description, while the status field enables changing between 'incomplete' and 'complete' states. The optional nature of these fields follows the PATCH semantics, supporting partial updates to minimize data transfer and simplify client logic.\n\nWhen updating the status to 'complete', the system automatically sets the completed_at timestamp to the current time in Asia/Seoul timezone. When updating the status to 'incomplete', the system removes the completion timestamp while preserving the original creation timestamp, maintaining accurate historical context about the task's lifecycle.\n\nThe taskuser_id field is not included in this update type, preventing clients from changing task ownership. This enforces proper security boundaries and ensures that tasks remain associated with their original creator, maintaining data integrity and preventing ownership spoofing.\n\nThe absence of the created_at field in this update type ensures that the creation timestamp remains immutable as a business record, preserving the historical accuracy of when the task was conceived. This immutable field serves as a reliable reference point for tracking task age and workflow patterns.\n\nValidation rules enforce the 100-character limit on the title field and prevent empty titles when the title is being updated, ensuring data quality while providing clear feedback to users. These rules are applied server-side to prevent bypassing through direct API calls, maintaining consistency across all client implementations.\n\nThe update type supports the business requirement for flexible task management by allowing users to modify task details as their work progresses. This enables scenarios like clarifying task descriptions, marking tasks as complete once work has been accomplished, or reopening tasks that were marked complete prematurely.\n\nThe absence of the description field in this update type (despite mentions in requirements) aligns with the provided schema which does not include a description column. This demonstrates adherence to the actual implementation over potentially outdated documentation, ensuring the API contract matches the database structure.\n\n> The IUpdate variant is not explicitly defined in the Prisma schema but is derived from the business requirement for flexible task modification, including only the title and status fields that users should be able to change on existing tasks."},"IMinimalTodoTask.ISummary":{"description":"Minimal representation of a task for list displays and search results.\n\nThis variant type provides a lightweight view of task information optimized for scenarios where multiple tasks are displayed simultaneously, such as in list views or search results. It includes only the essential fields needed to identify and distinguish tasks, reducing bandwidth usage and improving rendering performance.\n\nThe summary includes the task's unique identifier for reference and linking purposes, the title for content identification, the status for completion tracking, and the creation timestamp for chronological context. By excluding the completed_at timestamp and other non-essential fields, this representation minimizes data transfer while maintaining sufficient information for user decision-making.\n\nThe type is used as the array item type in the IPageIMinimalTodoTask.ISummary container, which delivers paginated search results with pagination metadata. This enables efficient retrieval of large numbers of tasks in chunks, supporting the business requirement for handling up to 100 tasks per user without performance degradation.\n\nThe summary view supports the primary user interface patterns by providing enough information for users to quickly assess their task list and identify items requiring attention. The minimal field set aligns with the application's minimalist philosophy by avoiding information overload in list displays.\n\nField selection follows the principle of progressive disclosure, where detailed information is available on demand through the detail operation, while the summary provides just enough information for efficient scanning and selection. This approach optimizes both performance and user experience by reducing cognitive load in list views.\n\nThe absence of sensitive information (such as detailed descriptions or internal metadata) makes this representation suitable for various contexts, including potential future integration points or reporting features that might leverage task data without exposing the complete entity.\n\nBy defining this as a named type in the schema components, the system ensures consistency in list view representations across different operations and client implementations. This promotes uniform user experience and simplifies client-side development by providing a clear contract for what data to expect in list contexts.\n\n> The ISummary variant is not explicitly defined in the Prisma schema but is derived from the business requirement for efficient list displays and search results, selecting only the most essential fields from the minimal_todo_tasks entity."},"IMinimalTodoTask.IRequest":{"description":"Search criteria and pagination parameters for retrieving tasks.\n\nThis variant type defines the structure of the request body for the search operation, combining pagination controls with various filtering options to enable flexible task retrieval. It allows users to customize how tasks are returned from the server, supporting efficient navigation of potentially large task collections.\n\nThe request includes an optional pagination object that specifies page number and limit for controlling the size and position of the result set. This enables paginated retrieval of tasks, allowing clients to load data in manageable chunks rather than retrieving all tasks at once, which optimizes performance and reduces bandwidth usage.\n\nThe search parameter provides full-text search capabilities, allowing users to find tasks by matching against the title field using partial or fuzzy matching. This supports common use cases like finding similar tasks, locating items by keywords, or recovering forgotten tasks through contextual clues.\n\nThe status parameter enables filtering tasks by their completion state, allowing users to view only incomplete tasks (for focusing on pending work) or only completed tasks (for reviewing accomplishments). This filtering capability supports different workflow patterns while maintaining the minimalist interface design.\n\nThe createdAt parameter allows filtering tasks by creation date range, supporting use cases like finding tasks created during a specific period or identifying recent additions. The completedAt parameter enables similar filtering for completed tasks, allowing users to review work accomplished during particular time frames.\n\nBy defining this as a named type, the system ensures consistency in search parameters across different client implementations and provides clear documentation of the available filtering options. This promotes reliable integration and enhances developer experience by providing a clear contract for how to query tasks.\n\nThe optional nature of all parameters makes the search flexible, allowing users to specify only the criteria they need while relying on server defaults for unspecified options. This supports both simple queries (e.g., getting the first page of all tasks) and complex, targeted searches (e.g., finding incomplete tasks created last week with a specific keyword).\n\n> The IRequest variant is not explicitly defined in the Prisma schema but is derived from the business requirement for flexible task search and filtering, combining pagination controls with multiple filter options to support comprehensive task discovery."},"IPage.IMinimalTodoTask.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information including current page, records per page, total records, and total pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMinimalTodoTask.ISummary"},"description":"Array of task summary records matching the search criteria."}},"required":["pagination","data"],"description":"Paginated collection of task summaries.\n\nFollows the fixed IPage structure with pagination metadata and data array. Contains the result of a task search operation with filtering, sorting, and pagination applied.\n\nThe data field contains IMinimalTodoTask.ISummary objects, providing lightweight task representations for list displays.\n\nThis structure ensures consistent pagination handling across all paginated endpoints while minimizing data transfer for improved performance."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Limitation of records per page."},"records":{"type":"integer","description":"Total records in the database matching the criteria."},"pages":{"type":"integer","description":"Total pages available."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for list responses.\n\nContains all information needed to navigate paginated results, including current position, page size, and total counts.\n\nThis standard structure is used across all paginated responses for consistency."},"IAuthorizationToken.token":{"description":"Access token for authenticating API requests.\n\nThe access token is a cryptographically secure JWT (JSON Web Token) used to authenticate requests to protected endpoints in the minimalTodo application. After successful authentication or token refresh, clients must include this token in the Authorization header using the Bearer scheme for all subsequent requests to protected resources.\n\nThe token contains encoded claims about the user's identity, scope of access, and expiration time. It follows industry standard JWT format with header, payload, and signature components. The payload includes the user's ID, role, and other authentication context information needed for authorization decisions.\n\nSecurity requirements include transmitting tokens exclusively over HTTPS to prevent interception, storing tokens securely on client devices (using secure storage mechanisms), and implementing proper token revocation procedures. The system validates tokens on every request to protected endpoints, verifying the signature, expiration time, and other claims before granting access to resources.\n\nToken expiration is managed according to business requirements, with access tokens having a limited lifespan that requires periodic renewal through the refresh token mechanism. This approach enhances security by minimizing the window of opportunity for token misuse while maintaining user session continuity.\n\nToken generation follows cryptographic best practices with sufficient entropy to prevent guessing attacks. The signing algorithm uses industry-standard cryptographic methods (e.g., HS256, RS256) appropriate for the application's security requirements and deployment environment.\n\nRelated operations include the authentication endpoints that issue tokens, the refresh process that extends session validity, and the authorization middleware that validates tokens on protected routes. The complete token lifecycle is managed to balance security and usability for the minimalTodo application's user base in the Asia/Seoul timezone context.\n\n> This property directly implements the token issuance requirement specified in authentication operations but not explicitly defined in the Prisma schema as it represents a standard authentication component."},"IMinimalTodoTask.id":{"description":"Primary identifier for the task entity.\n\nThis field serves as the primary key for the minimal_todo_tasks table, providing a unique identifier for each task record. The UUID format ensures global uniqueness across distributed systems and prevents sequential ID enumeration attacks that could expose usage patterns.\n\nThe identifier is system-generated upon task creation and remains immutable throughout the task's lifecycle. It's used as the reference point for all task-specific operations including retrieval, update, and deletion. The UUID v4 specification provides sufficient entropy to prevent guessing of task IDs, enhancing security by making it difficult for unauthorized users to access tasks through ID enumeration.\n\nThe field is heavily indexed for optimal query performance, supporting rapid retrieval of individual tasks by ID. This performance optimization ensures the detail operation can retrieve specific tasks with minimal latency, meeting the business requirement for immediate feedback during user interactions.\n\nThe identifier is included in all task representations (full entity and summary views) to support client-side state management and reference tracking. It's used in API endpoints as the path parameter for operations targeting specific tasks, such as the update and delete operations that require the taskId parameter.\n\nAs a primary key, this field participates in referential integrity constraints with other entities in the system, though the current schema shows no direct relationships to this specific field. The immutable nature of the identifier ensures stable references throughout the task lifecycle, supporting reliable linking and bookmarking capabilities within the application.\n\nThe field follows industry best practices for identifier generation by using UUIDs instead of sequential integers, which provides better security through unpredictability and avoids exposing information about the total number of tasks in the system. This approach aligns with the application's minimalist security philosophy while providing robust identifier management.\n\nThe identifier is returned in all task creation responses, allowing clients to immediately reference the newly created task. It's also used in error messages and logging for troubleshooting and support purposes, providing a consistent way to reference specific tasks across different system components and operations in the Asia/Seoul timezone context.\n\n> The id property in the Prisma schema represents the primary key for minimal_todo_tasks table with UUID format, ensuring globally unique identifiers for each task record."},"IMinimalTodoTask.taskuser_id":{"description":"Foreign key linking the task to its owner user.\n\nThis field establishes the relationship between a task and the user who created it, enforcing data ownership and isolation. It references the id field in the minimal_todo_taskusers table, creating a foreign key relationship that ensures referential integrity between tasks and their owning users.\n\nThe relationship follows the CASCADE deletion rule specified in the Prisma schema (@relation(onDelete: Cascade)), meaning that when a user account is deleted, all their associated tasks are automatically removed from the database. This maintains data consistency and prevents orphaned records in the system.\n\nThe field is indexed in combination with created_at to optimize queries for retrieving a user's tasks in chronological order. This indexing strategy supports the primary use case of displaying tasks organized by creation time, which is the default sorting behavior in the application's task list view.\n\nSecurity considerations include ensuring that all task operations verify the requesting user has authorization for the targeted task by comparing this field with the authenticated user's ID. This prevents unauthorized access to other users' tasks, maintaining the strict user data isolation required by the business requirements.\n\nThe field is not directly exposed in most API responses to maintain the minimalist user interface, but it's used internally to scope all queries to the authenticated user's context. When creating new tasks, the system automatically populates this field with the authenticated user's ID, never accepting it from client input to prevent ownership spoofing.\n\nThe UUID format ensures compatibility with the user ID format and provides the same security benefits of unpredictability and global uniqueness. This consistency across identifier formats simplifies application logic and reduces the potential for type-related errors during user and task operations.\n\nThe field supports the core business requirement of personal task management by ensuring each user can only access and modify their own tasks. This user-centric design focuses the application on individual productivity rather than team collaboration, aligning with the minimalist philosophy of addressing the specific problem of personal task tracking.\n\nDuring search operations, this field is implicitly used to scope the query to the authenticated user's tasks, even though it's not included as an explicit search parameter. This maintains the user experience of searching only their own tasks without requiring them to specify their user ID in every request.\n\n> The taskuser_id property in the Prisma schema represents the foreign key relationship to minimal_todo_taskusers.id, establishing ownership of tasks and enabling CASCADE deletion when a user is removed."},"IMinimalTodoTask.title":{"description":"Title of the task representing what needs to be done.\n\nThis field contains the primary description of the work item, conveying the essential information about what action is required. The title is limited to 100 characters to ensure conciseness and display compatibility across different devices and screen sizes, supporting the application's minimalist design principles.\n\nThe field is required for all tasks and cannot be empty, enforced by business rules during creation and update operations. Input validation prevents submission of tasks with empty titles, requiring users to provide at least a minimal description of the work item. This ensures that all tasks have meaningful content that can be understood by the user at a glance.\n\nThe field is indexed using PostgreSQL's pg_trgm extension with GIN indexing, enabling efficient full-text search capabilities that support partial matching and fuzzy search. This allows users to find tasks by typing part of the title, with the system returning relevant results even with typos or incomplete search terms. The search functionality is case-insensitive, enhancing usability by not requiring exact case matching.\n\nThe field may contain alphanumeric characters, spaces, and basic punctuation as allowed by the business rules, but is sanitized to prevent display and processing issues. Input validation strips invalid characters and notifies users of the cleanup, maintaining data quality while providing a flexible interface for task creation.\n\nThe title is the primary display field in task lists and search results, making it the most visible aspect of a task in the user interface. It's included in both the full entity representation and the summary view to support different use cases, from detailed task management to list views showing multiple tasks at once.\n\nThe field supports the business requirement of quick task capture by allowing users to record ideas with minimal effort. The character limit encourages brevity and focus, preventing overly complex task descriptions that could diminish the effectiveness of the productivity system.\n\nDuring search operations, this field is the primary target for full-text queries, with the system applying ranking algorithms to return the most relevant results first. The search functionality supports common use cases like finding similar tasks, locating tasks by keywords, and recovering forgotten tasks through contextual clues in the title.\n\n> The title property in the Prisma schema represents the task's descriptive name limited to 100 characters, stored as a string without explicit constraints but enforced by business rules in application logic."},"IMinimalTodoTask.status":{"description":"Current business status of the task indicating completion.\n\nThis field represents the task's lifecycle state with only two valid values: 'incomplete' (default) and 'complete'. This binary status system maintains simplicity by avoiding additional states or complexity that could compromise the minimalist philosophy of the application.\n\nThe status field is required and defaults to 'incomplete' when a task is created, reflecting the typical scenario where new tasks represent work that needs to be done. Users can change the status to 'complete' to mark a task as finished, which triggers the recording of the completion timestamp in the completed_at field.\n\nThe field is used to visually distinguish tasks in the user interface, with incomplete tasks shown in a standard style and complete tasks typically displayed with strikethrough text or other visual indicators to show they have been accomplished. This visual feedback helps users quickly assess their progress and remaining workload.\n\nWhen updating a task's status from incomplete to complete, the system automatically sets the completed_at timestamp to the current time in Asia/Seoul timezone. When updating from complete to incomplete, the system removes the completion timestamp while preserving the creation timestamp, maintaining historical accuracy of when the task was conceived.\n\nThe field supports filtering operations in the search functionality, allowing users to view only incomplete tasks, only completed tasks, or both. This enables various workflows such as focusing on pending work or reviewing completed tasks for progress tracking.\n\nThe binary status system aligns with the business requirement for simplicity in task management, avoiding complex state machines or workflow systems that would add unnecessary complexity. This focus on essential functionality ensures the application remains accessible and usable for users who need a straightforward way to track their responsibilities.\n\nThe field participates in sorting operations, with the system prioritizing incomplete tasks above completed ones in the default view. This ensures that active work items remain visible and accessible, supporting effective task management and preventing important items from being lost in a long list.\n\n> The status property in the Prisma schema represents the task's current state with two values: 'incomplete' (initial) and 'complete', directly implementing the binary status requirement specified in the business documentation."},"IMinimalTodoTask.created_at":{"description":"Timestamp representing when the task was initially created.\n\nThis field records the exact moment when the task was conceived and added to the system, preserving an immutable business record of when the work item was identified. The timestamp is set automatically when a task is created and remains unchanged throughout the task's lifecycle, providing a reliable reference point for tracking task age and workflow patterns.\n\nThe timestamp is stored in ISO 8601 format with timezone information, specifically using the Asia/Seoul timezone as the business operational standard. This ensures temporal consistency across all operations and prevents timezone-related issues when users access their tasks from different geographic locations, particularly important for users who might travel or work remotely across time zones.\n\nThe field is used for chronological sorting of tasks, with the default view showing tasks in order of creation (newest first). This supports the user experience of reviewing recent task additions and maintaining context about the sequence in which work items were identified.\n\nThe timestamp is indexed to optimize queries that filter or sort tasks by creation time, particularly supporting the chronological display of tasks in the primary interface. This performance optimization ensures smooth loading of task lists even with a substantial number of active tasks, meeting the business requirement for responsive interaction.\n\nThe field supports analytics and reporting features by enabling time-based analysis of task creation patterns, such as identifying peak times for task creation or tracking productivity trends over time. While the basic version focuses on simple task management, this timestamp provides the foundation for potential future enhancements in productivity insights.\n\nThe immutable nature of this field ensures data integrity by preventing accidental or intentional modification of when a task was created. This maintains the historical accuracy of the task record and supports the business requirement for reliable task tracking and accountability.\n\nThe timestamp is displayed in user-friendly relative format (e.g., \"2 hours ago\", \"yesterday\") in the interface, while also being available in absolute format when needed. This balance between human-readable presentation and precise timestamp data supports both quick assessment and accurate time tracking.\n\n> The created_at property in the Prisma schema represents the date and time when the task was first created, stored as a timestamptz type to include timezone information and ensure accurate temporal representation."},"IMinimalTodoTask.completed_at":{"description":"Timestamp recording when the task was marked as complete.\n\nThis field captures the exact moment when a task transitioned from incomplete to complete status, providing historical accuracy for completion tracking and business integrity. The timestamp is set automatically when the task's status is updated to 'complete', with the system recording the current time in Asia/Seoul timezone.\n\nThe field is nullable (optional) to reflect the state of incomplete tasks, which do not have a completion timestamp. When present, the timestamp is stored in ISO 8601 format with timezone information to ensure temporal accuracy across different user sessions and geographic locations.\n\nThe field is used in the user interface to show when tasks were completed, helping users review their productivity and work patterns. Completed tasks typically display both the creation and completion timestamps to provide context about how long a task remained active before being finished.\n\nWhen a completed task is updated back to incomplete status, the system removes the completion timestamp while preserving the creation timestamp, maintaining accurate historical context about the task's lifecycle. This allows users to reopen tasks that were marked complete prematurely without losing the original creation context.\n\nThe timestamp supports analytics and reporting by enabling time-based analysis of task completion patterns, such as measuring average time to completion or identifying trends in productivity. While the basic version focuses on simple task management, this timestamp provides the foundation for potential future enhancements in productivity insights and performance tracking.\n\nThe field participates in filtering operations in the search functionality, allowing users to find tasks completed within specific date ranges. This enables various workflows such as reviewing recent accomplishments or finding tasks completed during a particular project phase.\n\nThe timestamp is indexed to optimize queries that filter or sort tasks by completion time, particularly supporting review of completed work. This performance optimization ensures smooth loading of completed task views, even with a substantial history of completed items.\n\n> The completed_at property in the Prisma schema represents the date and time when the task was completed, stored as a nullable timestamptz type to support incomplete tasks that lack a completion timestamp."},"IMinimalTodoTask.ISummary.id":{"description":"Unique identifier of the task.\n\nThis field corresponds to the id field in the full IMinimalTodoTask entity, providing a stable reference point for the task in list and search contexts. It enables clients to uniquely identify and reference specific tasks even when viewing them in summary form.\n\nThe identifier is included in the summary representation to support operations that need to reference specific tasks, such as updating or deleting individual items from a list view. It also enables bookmarking and deep linking capabilities, allowing users to share direct links to specific tasks.\n\nThe UUID format ensures global uniqueness and provides security benefits by making task IDs unpredictable, preventing enumeration attacks that could expose information about a user's task collection. This aligns with the application's security requirements while maintaining the minimalist design philosophy.\n\nThe field is used in client-side state management to track selected items, maintain selection state during pagination, and support various interaction patterns like batch operations on multiple tasks. Its presence in the summary enables efficient client-side operations without requiring additional API calls to retrieve full task details.\n\nBy including the identifier in the summary, the system supports the business requirement for immediate feedback and efficient navigation, allowing users to interact with tasks directly from list views without first loading full details. This enhances responsiveness and supports the core use case of rapid task management.\n\n> The id property in the ISummary variant corresponds directly to the id field in the minimal_todo_tasks Prisma model, maintaining consistency with the primary key representation."},"IMinimalTodoTask.ISummary.title":{"description":"Title of the task for display in summary views.\n\nThis field presents the primary content of the task in list and search contexts, allowing users to quickly identify what work is required. The title is limited to 100 characters as enforced by business rules, ensuring compatibility with various display formats and preventing overly long text that could disrupt layout in compact list views.\n\nThe field is the most visible aspect of a task in summary representations, serving as the primary identifier for users scanning their task list. It's typically displayed prominently in the user interface, often as the main text element in list items.\n\nThe inclusion of the title in the summary enables efficient searching and filtering, as users can identify relevant tasks by reading only the title without needing to load additional details. This supports the application's responsiveness requirements by minimizing the information needed for effective task management.\n\nThe field maintains consistency with the full task entity, ensuring that the same title appears in both summary and detailed views. This provides a seamless user experience when transitioning between list views and individual task details.\n\nBy including the title in the summary, the system supports progressive disclosure patterns where users can scan a list of task titles to find relevant items, then access full details only for tasks requiring attention. This approach optimizes both performance and user experience by minimizing cognitive load in list contexts.\n\n> The title property in the ISummary variant corresponds directly to the title field in the minimal_todo_tasks Prisma model, ensuring consistent presentation of task content across different representations."},"IMinimalTodoTask.ISummary.status":{"description":"Completion status of the task in summary form.\n\nThis field indicates whether a task is incomplete or complete, providing immediate visual feedback about task progress in list and search views. The binary status system (incomplete/complete) maintains simplicity and aligns with the application's minimalist philosophy by avoiding complex state machines.\n\nThe status is used to visually style list items, typically with complete tasks shown with strikethrough text or other visual indicators to distinguish them from active tasks. This allows users to quickly assess their progress and identify remaining work items without reading detailed information.\n\nThe inclusion of status in the summary supports efficient filtering operations, enabling users to view only incomplete tasks when focusing on pending work or only completed tasks when reviewing accomplishments. This flexibility supports different workflow patterns while maintaining the minimal interface design.\n\nThe field enables sorting of tasks by completion status, with the system typically prioritizing incomplete tasks above completed ones in the default view. This ensures that active work items remain visible and accessible, supporting effective task management and preventing important items from being lost in a long list.\n\nBy including the status in the summary, the system supports the business requirement for immediate feedback and visual distinction between completed and incomplete tasks, allowing users to manage their workload effectively without loading detailed information for each task.\n\n> The status property in the ISummary variant corresponds directly to the status field in the minimal_todo_tasks Prisma model, maintaining consistent status representation across different views."},"IMinimalTodoTask.ISummary.created_at":{"description":"Creation timestamp for chronological ordering in summary views.\n\nThis field provides temporal context for tasks in list and search results, enabling chronological sorting and relative time display. The timestamp allows users to understand when tasks were created, which helps in assessing task age and prioritizing newer items that may require immediate attention.\n\nThe timestamp is used to sort tasks in the default view, typically with most recently created tasks appearing first. This supports common workflow patterns where users want to see their most recent additions at the top of the list for easy access and review.\n\nIn the user interface, the timestamp is typically displayed in a human-readable relative format (e.g., \"2 hours ago\", \"yesterday\") rather than absolute time, making it easier for users to quickly assess task recency without mental calculation. This enhances usability while still providing accurate temporal information.\n\nThe inclusion of the creation timestamp in the summary supports analytics and pattern recognition, allowing users to identify trends in their task creation behavior, such as peak times for adding new tasks or periods of increased productivity.\n\nThe field maintains consistency with the full task entity, ensuring that the same creation time is shown in both summary and detailed views. This provides a seamless user experience when transitioning between different levels of task information.\n\n> The created_at property in the ISummary variant corresponds directly to the created_at field in the minimal_todo_tasks Prisma model, ensuring consistent temporal representation across different views."},"IMinimalTodoTask.IRequest.pagination":{"description":"Pagination controls for task search results.\n\nThis field contains parameters for controlling the size and position of the result set when retrieving tasks. It allows clients to request specific pages of data with a defined number of items per page, enabling efficient handling of potentially large collections of tasks.\n\nThe current implementation includes page (zero-based index) and limit (number of items per page) parameters, following common pagination patterns. The limit parameter has a default value of 100, which balances the number of items transferred per request with the need to minimize round trips to the server.\n\nPagination enables the application to handle large numbers of tasks without performance degradation, supporting the business requirement to handle up to 100 tasks per user while maintaining responsiveness. By loading data in chunks, the system reduces initial load time and bandwidth usage, particularly important for users on mobile connections.\n\nThe field is optional, allowing clients to omit it and receive defaults from the server. This supports simple use cases where users want to retrieve the first page of results without specifying pagination parameters explicitly.\n\nPagination status is returned in the response through the IPage.IPagination object, which includes metadata about the current position, total records, and number of pages. This enables clients to render appropriate pagination controls and inform users about the scope of available data.\n\nThe implementation follows best practices for API pagination by using offset-based navigation rather than cursor-based, which is more intuitive for users who expect to navigate by page numbers. However, the system could be extended to support cursor-based pagination for better performance with very large data sets if needed in future iterations.\n\nBy including pagination in the request, the system supports the business requirement for responsive data retrieval, ensuring that task lists load completely within 3 seconds even with a substantial number of active tasks. This enhances user experience by providing quick feedback and smooth navigation through task collections.\n\n> The pagination property in the IRequest variant provides control over result set size and position, corresponding to the server-side implementation of pagination for task search results."},"IMinimalTodoTask.IRequest.search":{"description":"Full-text search term for finding tasks by content.\n\nThis field allows users to search for tasks by matching against the title field using partial or fuzzy matching. The search is typically case-insensitive and supports substring matching, enabling users to find tasks even when they don't remember the exact title.\n\nThe search term is applied to the task title field, which is indexed using PostgreSQL's pg_trgm extension for efficient pattern matching. This supports various search patterns including prefix matching (tasks starting with the search term), substring matching (tasks containing the search term anywhere), and fuzzy matching (tasks with similar but not identical titles).\n\nThe field is optional and can be null, allowing clients to omit it when they want to retrieve all tasks without filtering. When provided, the search term is used to filter the result set server-side, reducing the amount of data transferred to the client.\n\nThe implementation supports common search use cases such as finding similar tasks, recovering forgotten items through contextual clues, and quickly locating specific work items in a long task list. The search functionality is optimized for performance, with response times designed to feel instantaneous as the user types.\n\nBy including search in the request, the system supports the business requirement for efficient task discovery and navigation, allowing users to manage large numbers of tasks without relying solely on chronological ordering. This enhances usability by providing multiple ways to access and organize tasks.\n\nThe search functionality maintains security by ensuring that users can only find their own tasks, with all search operations scoped to the authenticated user's context. This prevents information leakage between users while providing powerful search capabilities within a user's own task collection.\n\n> The search property in the IRequest variant enables content-based filtering of tasks, leveraging the pg_trgm index on the title field in the minimal_todo_tasks Prisma model for efficient pattern matching."},"IMinimalTodoTask.IRequest.status":{"description":"Filter for task completion status in search operations.\n\nThis field allows users to filter tasks by their current status, enabling focused views of either incomplete or complete tasks. The filter accepts the same status values as the task entity ('incomplete' or 'complete'), providing a direct mapping to the underlying data model.\n\nThe filter supports the business requirement for visual distinction between completed and incomplete tasks by enabling users to view only active work items when focusing on pending responsibilities or only completed tasks when reviewing accomplishments. This flexibility supports different workflow patterns while maintaining the minimalist interface design.\n\nThe field is optional and can be null, allowing clients to omit it when they want to retrieve all tasks regardless of status. When provided, the filter is applied server-side, reducing the amount of data transferred to the client and improving performance for large task collections.\n\nThe implementation aligns with the binary status system (incomplete/complete) that maintains simplicity in task management, avoiding complex state machines or workflow systems that would add unnecessary complexity. This focus on essential functionality ensures the application remains accessible and usable for users who need a straightforward way to track their responsibilities.\n\nThe filter supports both exact matching against the status field and can be extended to support more complex patterns if needed (e.g., excluding completed tasks). However, the current implementation focuses on the essential use cases to maintain simplicity in the API contract.\n\nBy including status filtering in the request, the system supports the business requirement for efficient task management, allowing users to quickly focus on the tasks that matter most to their current workflow. This enhances productivity by reducing cognitive load and visual clutter in the task list.\n\n> The status property in the IRequest variant corresponds directly to the status field in the minimal_todo_tasks Prisma model, enabling direct filtering of tasks by their completion state."},"IMinimalTodoTask.IRequest.createdAt":{"description":"Filter for task creation date range in search operations.\n\nThis field allows users to find tasks created within a specific time period, supporting use cases like reviewing recent additions or identifying tasks from a particular project phase. The filter accepts an ISO 8601 datetime string, which is compared against the task's created_at timestamp.\n\nThe field supports both exact date matching and range queries, enabling users to find tasks created on a specific day or within a date range. The implementation typically includes the ability to specify start and end dates, though this request format appears to use a single datetime value that might represent either a specific point in time or be part of a range depending on server interpretation.\n\nThe filter is applied server-side using the indexed created_at field in the minimal_todo_tasks table, ensuring efficient query performance even with large numbers of tasks. The index on created_at enables fast retrieval of time-based queries, supporting the business requirement for responsive data access.\n\nThe field is optional and can be null, allowing clients to omit it when they want to retrieve all tasks without date-based filtering. When provided, the datetime value is interpreted in the Asia/Seoul timezone context, ensuring consistency with the business operational standard.\n\nThe implementation supports common use cases such as finding tasks created during a specific week, identifying recent additions that may require attention, or reviewing work started during a particular time period. This enhances the application's utility for productivity tracking and project management.\n\nThe filter maintains data privacy by ensuring that users can only find their own tasks, with all queries scoped to the authenticated user's context. This prevents information leakage between users while providing powerful time-based filtering capabilities within a user's own task collection.\n\nBy including creation date filtering in the request, the system supports the business requirement for comprehensive task discovery, allowing users to organize and access their tasks through multiple dimensions (content, status, time) rather than relying solely on chronological ordering.\n\n> The createdAt property in the IRequest variant corresponds directly to the created_at field in the minimal_todo_tasks Prisma model, enabling time-based filtering of tasks by their creation date."},"IMinimalTodoTask.IRequest.completedAt":{"description":"Filter for task completion date range in search operations.\n\nThis field allows users to find tasks that were marked complete within a specific time period, supporting use cases like reviewing recent accomplishments or analyzing productivity patterns. The filter accepts an ISO 8601 datetime string, which is compared against the task's completed_at timestamp.\n\nThe field supports both exact date matching and range queries, enabling users to find tasks completed on a specific day or within a date range. The implementation typically includes the ability to specify start and end dates, though this request format appears to use a single datetime value that might represent either a specific point in time or be part of a range depending on server interpretation.\n\nThe filter is applied server-side using the completed_at field in the minimal_todo_tasks table, ensuring efficient query performance. While there isn't an explicit index on completed_at in the provided schema, the field benefits from the general created_at index and can be optimized further if needed based on query patterns.\n\nThe field is optional and can be null, allowing clients to omit it when they don't need to filter by completion date. When provided, the datetime value is interpreted in the Asia/Seoul timezone context, ensuring consistency with the business operational standard for temporal data.\n\nThe implementation supports common use cases such as finding tasks completed during a specific week, identifying recently finished work, or reviewing accomplishments from a particular project phase. This enhances the application's utility for productivity tracking and personal analytics.\n\nThe filter maintains data privacy by ensuring that users can only find their own tasks, with all queries scoped to the authenticated user's context. This prevents information leakage between users while providing powerful time-based filtering capabilities for completed tasks within a user's own collection.\n\nBy including completion date filtering in the request, the system supports the business requirement for comprehensive task discovery, allowing users to analyze their work patterns across different dimensions. This complements the creation date filtering and status filtering to provide a complete picture of task lifecycle management.\n\n> The completedAt property in the IRequest variant corresponds directly to the completed_at field in the minimal_todo_tasks Prisma model, enabling time-based filtering of tasks by their completion date."},"IMinimalTodoTask.ICreate.title":{"description":"Title of the new task being created.\n\nThis field represents the primary content of a task and is the only required information when creating a new task. The title should clearly describe what work needs to be done, providing sufficient context for the user to understand the task's purpose when reviewing their list.\n\nThe field is required and must contain at least one character, enforced by validation rules that prevent empty titles. This ensures that all tasks have meaningful content that can be understood by the user at a glance, supporting the business requirement for effective task management.\n\nThe title is limited to 100 characters to ensure conciseness and display compatibility across different devices and screen sizes. This constraint encourages brevity and focus, preventing overly complex task descriptions that could diminish the effectiveness of the productivity system while still allowing sufficient space for descriptive task names.\n\nInput validation strips invalid characters (non-alphanumeric, excessive punctuation) and notifies users of the cleanup, maintaining data quality while providing a flexible interface for task creation. The system normalizes the title to prevent display and processing issues while preserving the user's intended meaning.\n\nThe field is the primary input for new tasks, supporting the business requirement for quick capture of ideas with minimal effort. Users can add tasks rapidly during meetings or other situations where recording thoughts quickly is important, with the ability to edit or clarify the title later if needed.\n\nSecurity considerations include preventing script injection or other malicious content through proper input sanitization, though the minimalist nature of the field (simple text) reduces the attack surface compared to rich text fields. The system treats the title as plain text for display purposes, preventing HTML or other executable content from being rendered.\n\n> The title property in the ICreate variant corresponds directly to the title field in the minimal_todo_tasks Prisma model, serving as the only user-provided input when creating new tasks."},"IMinimalTodoTask.IUpdate.title":{"description":"New title for the task during update operations.\n\nThis optional field allows users to modify the descriptive text of an existing task, providing flexibility to clarify or refine the task's purpose as work progresses. The field is optional to support partial updates, allowing clients to change only the title while leaving other fields unchanged.\n\nThe new title is subject to the same validation rules as during task creation: it must not be empty (if provided) and must not exceed 100 characters. These constraints ensure data quality and consistency across task modifications, preventing overly long or ambiguous task descriptions.\n\nInput validation strips invalid characters and notifies users of the cleanup, maintaining data quality while allowing flexible editing. The system normalizes the title to prevent display and processing issues while preserving the user's intended meaning.\n\nThe field supports common use cases such as clarifying ambiguous task descriptions, updating task details as requirements change, or correcting typographical errors in the original title. This flexibility enhances the usefulness of the task management system by allowing tasks to evolve as work progresses.\n\nSecurity considerations include preventing script injection or other malicious content through proper input sanitization, though the minimalist nature of the field (simple text) reduces the attack surface compared to rich text fields. The system treats the title as plain text for display purposes, preventing HTML or other executable content from being rendered.\n\nThe field is used in conjunction with the status field to support comprehensive task modification, allowing users to update both the description and completion state of tasks as needed. This enables scenarios like updating a task's title to reflect completed work or clarifying the description before marking a task as complete.\n\n> The title property in the IUpdate variant corresponds directly to the title field in the minimal_todo_tasks Prisma model, serving as the modifiable task description during update operations."},"IMinimalTodoTask.IUpdate.status":{"description":"New status for the task during update operations.\n\nThis optional field allows users to change the completion state of an existing task between 'incomplete' and 'complete'. The field is optional to support partial updates, allowing clients to change only the status while leaving other fields unchanged.\n\nWhen updating to 'complete' status, the system automatically records the current time in Asia/Seoul timezone as the completion timestamp in the completed_at field. This provides historical accuracy for completion tracking and business integrity, capturing exactly when the task was marked as finished.\n\nWhen updating to 'incomplete' status, the system removes the completion timestamp while preserving the original creation timestamp, allowing users to reopen tasks that were marked complete prematurely without losing the historical context of when the task was initially created.\n\nThe binary status system (incomplete/complete) maintains simplicity by avoiding additional states or complexity that could compromise the minimalist philosophy of the application. This focus on essential functionality ensures the application remains accessible and usable for users who need a straightforward way to track their responsibilities.\n\nThe field supports visual feedback in the user interface, with tasks typically displayed with strikethrough text or other indicators when complete. This allows users to quickly assess their progress and remaining workload at a glance.\n\nSecurity considerations include ensuring that status changes are authorized by verifying the requesting user has ownership of the task. This prevents unauthorized users from marking tasks as complete or incomplete, maintaining data integrity and accountability.\n\nThe field is used in conjunction with the title field to support comprehensive task modification, allowing users to update both the description and completion state of tasks as needed. This enables scenarios like marking a task as complete after finishing the work or reopening a task that requires additional work.\n\n> The status property in the IUpdate variant corresponds directly to the status field in the minimal_todo_tasks Prisma model, serving as the modifiable completion state during update operations."},"IPageIMinimalTodoTask.ISummary":{"description":"Paginated response container for task search results.\n\nThis container type defines the structure of the response for the search operation, wrapping the actual task data with pagination metadata. It follows the standard IPage<T> interface pattern but is specialized for holding IMinimalTodoTask.ISummary items.\n\nThe container includes a pagination object that provides metadata about the current page, including the current page number, limit (items per page), total number of records, and total number of pages. This enables clients to render appropriate pagination controls and inform users about the scope of available data.\n\nThe data field contains an array of IMinimalTodoTask.ISummary objects, representing the tasks that match the search criteria for the current page. This summary view includes only essential fields to minimize data transfer and improve rendering performance, particularly important when displaying large numbers of tasks.\n\nThe container may also include a search field that echoes back the search term used in the request, allowing clients to confirm what query produced the results. This supports user experience by providing feedback about the current filter state and enabling easy modification of search criteria.\n\nBy defining this as a named type in the components schema, the system ensures consistency in paginated responses across different operations and client implementations. This promotes reliable integration and enhances developer experience by providing a clear contract for how paginated data is structured.\n\nThe implementation follows REST API best practices for pagination, providing both the data and the metadata needed to navigate through large result sets efficiently. This supports the business requirement for responsive data retrieval, ensuring that task lists load completely within 3 seconds even with a substantial number of active tasks.\n\nThe fixed structure of the container (required pagination and data fields) ensures predictable responses that clients can reliably parse and render. This reduces integration complexity and minimizes the potential for errors in client-side code that processes paginated results.\n\n> The IPageIMinimalTodoTask.ISummary type specializes the generic IPage<T> interface for task search results, following the naming convention where the type after IPage determines the array item type in the data property."},"IPageIMinimalTodoTask.ISummary.pagination":{"description":"Pagination metadata for task search results.\n\nThis field contains information about the current page in the result set, including the current page number, the number of items per page (limit), the total number of records matching the search criteria, and the total number of pages available. This metadata enables clients to render appropriate pagination controls and inform users about the scope of available data.\n\nThe current property indicates the zero-based index of the current page, typically ranging from 0 to pages-1. The limit property specifies how many items are included in the current page, with a default value of 100 that balances data transfer efficiency with the need to minimize round trips to the server.\n\nThe records property indicates the total number of tasks that match the search criteria, regardless of pagination. This allows clients to calculate the total number of pages and provide users with context about the size of their task collection. The pages property provides the total number of pages available, calculated as the ceiling of records divided by limit.\n\nThis metadata is generated server-side based on the requested pagination parameters and the total count of matching records. It ensures that clients have accurate information about the result set, preventing inconsistencies between displayed data and pagination controls.\n\nThe inclusion of complete pagination metadata supports various client implementations, from simple next/previous controls to comprehensive page number navigation. It also enables features like \"load more\" infinite scrolling by providing the total count needed to determine when all data has been loaded.\n\n> The pagination property in IPageIMinimalTodoTask.ISummary follows the standard IPage.IPagination interface, providing metadata about the current position and size of the result set."},"IPageIMinimalTodoTask.ISummary.data":{"description":"Array of task summaries matching the search criteria.\n\nThis field contains the actual task data for the current page of results, with each item represented as an IMinimalTodoTask.ISummary object. The array includes only tasks that match the search criteria and fall within the requested page range, providing focused results that match the user's query.\n\nThe items in the array include essential task information: the unique identifier (id), title (content), status (completion state), and creation timestamp (created_at). This minimal field set reduces bandwidth usage and improves rendering performance while providing sufficient information for users to identify and assess tasks in list views.\n\nThe array is ordered according to business rules, typically with incomplete tasks prioritized above completed ones and sorted by creation date (newest first) within each status group. This ordering supports common workflow patterns where users want to focus on pending work and see their most recent additions at the top of the list.\n\nThe size of the array is controlled by the limit parameter in the request, with a default of 100 items per page. This balances the amount of data transferred per request with the need to minimize round trips to the server, optimizing performance for both fast connections and mobile networks.\n\nThe array is empty when no tasks match the search criteria, with the pagination metadata reflecting the total count (typically 0 for records and pages). This allows clients to handle empty results gracefully and provide appropriate feedback to users.\n\n> The data property in IPageIMinimalTodoTask.ISummary contains an array of IMinimalTodoTask.ISummary objects, following the naming convention where the type after IPage determines the array item type. Each summary includes only essential fields for efficient list display."}}}}